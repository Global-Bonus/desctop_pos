//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ClientInformationalService_getVersion_args = function(args) {
};
ClientInformationalService_getVersion_args.prototype = {};
ClientInformationalService_getVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientInformationalService_getVersion_result.prototype = {};
ClientInformationalService_getVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountBonusPrograms_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountBonusPrograms_args.prototype = {};
ClientInformationalService_getCountBonusPrograms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountBonusPrograms_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountBonusPrograms_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountBonusPrograms_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountBonusPrograms_result.prototype = {};
ClientInformationalService_getCountBonusPrograms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountBonusPrograms_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountBonusPrograms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusPrograms_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getBonusPrograms_args.prototype = {};
ClientInformationalService_getBonusPrograms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusPrograms_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusPrograms_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusPrograms_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getBonusPrograms_result.prototype = {};
ClientInformationalService_getBonusPrograms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = new BonusProgram();
          elem284.read(input);
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusPrograms_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusPrograms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        iter285.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args = function(args) {
  this.merchantId = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args.prototype = {};
ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result.prototype = {};
ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getSupportedBonusProgramsByMerchant_args = function(args) {
  this.merchantId = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getSupportedBonusProgramsByMerchant_args.prototype = {};
ClientInformationalService_getSupportedBonusProgramsByMerchant_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getSupportedBonusProgramsByMerchant_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getSupportedBonusProgramsByMerchant_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getSupportedBonusProgramsByMerchant_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getSupportedBonusProgramsByMerchant_result.prototype = {};
ClientInformationalService_getSupportedBonusProgramsByMerchant_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = new BonusProgram();
          elem292.read(input);
          this.success.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getSupportedBonusProgramsByMerchant_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getSupportedBonusProgramsByMerchant_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter293 in this.success)
    {
      if (this.success.hasOwnProperty(iter293))
      {
        iter293 = this.success[iter293];
        iter293.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusProgramById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getBonusProgramById_args.prototype = {};
ClientInformationalService_getBonusProgramById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusProgramById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusProgramById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusProgramById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getBonusProgramById_result.prototype = {};
ClientInformationalService_getBonusProgramById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BonusProgram();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusProgramById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusProgramById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusProgramByAlias_args = function(args) {
  this.programAlias = null;
  if (args) {
    if (args.programAlias !== undefined) {
      this.programAlias = args.programAlias;
    }
  }
};
ClientInformationalService_getBonusProgramByAlias_args.prototype = {};
ClientInformationalService_getBonusProgramByAlias_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.programAlias = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusProgramByAlias_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusProgramByAlias_args');
  if (this.programAlias !== null && this.programAlias !== undefined) {
    output.writeFieldBegin('programAlias', Thrift.Type.STRING, 1);
    output.writeString(this.programAlias);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getBonusProgramByAlias_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getBonusProgramByAlias_result.prototype = {};
ClientInformationalService_getBonusProgramByAlias_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BonusProgram();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getBonusProgramByAlias_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getBonusProgramByAlias_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getExchangeRate_args = function(args) {
  this.merchantId = null;
  this.programId = null;
  this.date = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
  }
};
ClientInformationalService_getExchangeRate_args.prototype = {};
ClientInformationalService_getExchangeRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getExchangeRate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getExchangeRate_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 2);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 3);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getExchangeRate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getExchangeRate_result.prototype = {};
ClientInformationalService_getExchangeRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExchangeRate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getExchangeRate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getExchangeRate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getExchangeRateById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getExchangeRateById_args.prototype = {};
ClientInformationalService_getExchangeRateById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getExchangeRateById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getExchangeRateById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getExchangeRateById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getExchangeRateById_result.prototype = {};
ClientInformationalService_getExchangeRateById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExchangeRate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getExchangeRateById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getExchangeRateById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchants_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountMerchants_args.prototype = {};
ClientInformationalService_getCountMerchants_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchants_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchants_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchants_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountMerchants_result.prototype = {};
ClientInformationalService_getCountMerchants_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchants_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchants_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchants_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getMerchants_args.prototype = {};
ClientInformationalService_getMerchants_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchants_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchants_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchants_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchants_result.prototype = {};
ClientInformationalService_getMerchants_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = new Merchant();
          elem300.read(input);
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchants_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchants_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        iter301.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantsByProgram_args = function(args) {
  this.programId = null;
  this.filter = null;
  if (args) {
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountMerchantsByProgram_args.prototype = {};
ClientInformationalService_getCountMerchantsByProgram_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantsByProgram_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantsByProgram_args');
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 1);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantsByProgram_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountMerchantsByProgram_result.prototype = {};
ClientInformationalService_getCountMerchantsByProgram_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantsByProgram_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantsByProgram_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantsByProgram_args = function(args) {
  this.programId = null;
  this.filter = null;
  if (args) {
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getMerchantsByProgram_args.prototype = {};
ClientInformationalService_getMerchantsByProgram_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantsByProgram_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantsByProgram_args');
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 1);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantsByProgram_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantsByProgram_result.prototype = {};
ClientInformationalService_getMerchantsByProgram_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.success = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = new Merchant();
          elem308.read(input);
          this.success.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantsByProgram_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantsByProgram_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter309 in this.success)
    {
      if (this.success.hasOwnProperty(iter309))
      {
        iter309 = this.success[iter309];
        iter309.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getMerchantById_args.prototype = {};
ClientInformationalService_getMerchantById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantById_result.prototype = {};
ClientInformationalService_getMerchantById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Merchant();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantLogoById_args = function(args) {
  this.merchantId = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
  }
};
ClientInformationalService_getMerchantLogoById_args.prototype = {};
ClientInformationalService_getMerchantLogoById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantLogoById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantLogoById_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantLogoById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantLogoById_result.prototype = {};
ClientInformationalService_getMerchantLogoById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantLogoById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantLogoById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantPoints_args = function(args) {
  this.merchantId = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountMerchantPoints_args.prototype = {};
ClientInformationalService_getCountMerchantPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantPoints_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantPoints_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantPoints_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountMerchantPoints_result.prototype = {};
ClientInformationalService_getCountMerchantPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantPoints_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantPoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantPoints_args = function(args) {
  this.merchantId = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getMerchantPoints_args.prototype = {};
ClientInformationalService_getMerchantPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantPoints_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantPoints_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantPoints_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantPoints_result.prototype = {};
ClientInformationalService_getMerchantPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.success = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = new MerchantPoint();
          elem316.read(input);
          this.success.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantPoints_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantPoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter317 in this.success)
    {
      if (this.success.hasOwnProperty(iter317))
      {
        iter317 = this.success[iter317];
        iter317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantPointById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getMerchantPointById_args.prototype = {};
ClientInformationalService_getMerchantPointById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantPointById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantPointById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantPointById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantPointById_result.prototype = {};
ClientInformationalService_getMerchantPointById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MerchantPoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantPointById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantPointById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredMerchantActions_args = function(args) {
  this.merchantId = null;
  this.tagIds = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountAllRegisteredMerchantActions_args.prototype = {};
ClientInformationalService_getCountAllRegisteredMerchantActions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size318 = 0;
        var _rtmp3322;
        this.tagIds = [];
        var _etype321 = 0;
        _rtmp3322 = input.readListBegin();
        _etype321 = _rtmp3322.etype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          var elem324 = null;
          elem324 = input.readString().value;
          this.tagIds.push(elem324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredMerchantActions_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountAllRegisteredMerchantActions_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagIds.length);
    for (var iter325 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter325))
      {
        iter325 = this.tagIds[iter325];
        output.writeString(iter325);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredMerchantActions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountAllRegisteredMerchantActions_result.prototype = {};
ClientInformationalService_getCountAllRegisteredMerchantActions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredMerchantActions_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountAllRegisteredMerchantActions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredMerchantActions_args = function(args) {
  this.merchantId = null;
  this.tagIds = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getAllRegisteredMerchantActions_args.prototype = {};
ClientInformationalService_getAllRegisteredMerchantActions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size326 = 0;
        var _rtmp3330;
        this.tagIds = [];
        var _etype329 = 0;
        _rtmp3330 = input.readListBegin();
        _etype329 = _rtmp3330.etype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var elem332 = null;
          elem332 = input.readString().value;
          this.tagIds.push(elem332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredMerchantActions_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getAllRegisteredMerchantActions_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagIds.length);
    for (var iter333 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter333))
      {
        iter333 = this.tagIds[iter333];
        output.writeString(iter333);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredMerchantActions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getAllRegisteredMerchantActions_result.prototype = {};
ClientInformationalService_getAllRegisteredMerchantActions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.success = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = new MerchantAction();
          elem340.read(input);
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredMerchantActions_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getAllRegisteredMerchantActions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter341 in this.success)
    {
      if (this.success.hasOwnProperty(iter341))
      {
        iter341 = this.success[iter341];
        iter341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantActionsByMerchantPoint_args = function(args) {
  this.merchantPointId = null;
  this.filter = null;
  if (args) {
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountMerchantActionsByMerchantPoint_args.prototype = {};
ClientInformationalService_getCountMerchantActionsByMerchantPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantActionsByMerchantPoint_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantActionsByMerchantPoint_args');
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountMerchantActionsByMerchantPoint_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountMerchantActionsByMerchantPoint_result.prototype = {};
ClientInformationalService_getCountMerchantActionsByMerchantPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountMerchantActionsByMerchantPoint_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountMerchantActionsByMerchantPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionsByMerchantPoint_args = function(args) {
  this.merchantPointId = null;
  this.filter = null;
  if (args) {
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getMerchantActionsByMerchantPoint_args.prototype = {};
ClientInformationalService_getMerchantActionsByMerchantPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionsByMerchantPoint_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionsByMerchantPoint_args');
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionsByMerchantPoint_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantActionsByMerchantPoint_result.prototype = {};
ClientInformationalService_getMerchantActionsByMerchantPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size342 = 0;
        var _rtmp3346;
        this.success = [];
        var _etype345 = 0;
        _rtmp3346 = input.readListBegin();
        _etype345 = _rtmp3346.etype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          var elem348 = null;
          elem348 = new MerchantAction();
          elem348.read(input);
          this.success.push(elem348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionsByMerchantPoint_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionsByMerchantPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter349 in this.success)
    {
      if (this.success.hasOwnProperty(iter349))
      {
        iter349 = this.success[iter349];
        iter349.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getMerchantActionById_args.prototype = {};
ClientInformationalService_getMerchantActionById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantActionById_result.prototype = {};
ClientInformationalService_getMerchantActionById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MerchantAction();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionPictureById_args = function(args) {
  this.actionId = null;
  if (args) {
    if (args.actionId !== undefined) {
      this.actionId = args.actionId;
    }
  }
};
ClientInformationalService_getMerchantActionPictureById_args.prototype = {};
ClientInformationalService_getMerchantActionPictureById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionPictureById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionPictureById_args');
  if (this.actionId !== null && this.actionId !== undefined) {
    output.writeFieldBegin('actionId', Thrift.Type.STRING, 1);
    output.writeString(this.actionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getMerchantActionPictureById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.sessionError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getMerchantActionPictureById_result.prototype = {};
ClientInformationalService_getMerchantActionPictureById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getMerchantActionPictureById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getMerchantActionPictureById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 2);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountDiscountRulesForAction_args = function(args) {
  this.merchantActionId = null;
  this.filter = null;
  if (args) {
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountDiscountRulesForAction_args.prototype = {};
ClientInformationalService_getCountDiscountRulesForAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountDiscountRulesForAction_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountDiscountRulesForAction_args');
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountDiscountRulesForAction_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountDiscountRulesForAction_result.prototype = {};
ClientInformationalService_getCountDiscountRulesForAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountDiscountRulesForAction_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountDiscountRulesForAction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 2);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getDiscountRulesForAction_args = function(args) {
  this.merchantActionId = null;
  this.filter = null;
  if (args) {
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getDiscountRulesForAction_args.prototype = {};
ClientInformationalService_getDiscountRulesForAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getDiscountRulesForAction_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getDiscountRulesForAction_args');
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getDiscountRulesForAction_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getDiscountRulesForAction_result.prototype = {};
ClientInformationalService_getDiscountRulesForAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size350 = 0;
        var _rtmp3354;
        this.success = [];
        var _etype353 = 0;
        _rtmp3354 = input.readListBegin();
        _etype353 = _rtmp3354.etype;
        _size350 = _rtmp3354.size;
        for (var _i355 = 0; _i355 < _size350; ++_i355)
        {
          var elem356 = null;
          elem356 = new DiscountRule();
          elem356.read(input);
          this.success.push(elem356);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getDiscountRulesForAction_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getDiscountRulesForAction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter357 in this.success)
    {
      if (this.success.hasOwnProperty(iter357))
      {
        iter357 = this.success[iter357];
        iter357.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 2);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredCertificates_args = function(args) {
  this.merchantId = null;
  this.tagIds = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getCountAllRegisteredCertificates_args.prototype = {};
ClientInformationalService_getCountAllRegisteredCertificates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.tagIds = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = input.readString().value;
          this.tagIds.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredCertificates_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountAllRegisteredCertificates_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagIds.length);
    for (var iter365 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter365))
      {
        iter365 = this.tagIds[iter365];
        output.writeString(iter365);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredCertificates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCountAllRegisteredCertificates_result.prototype = {};
ClientInformationalService_getCountAllRegisteredCertificates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCountAllRegisteredCertificates_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCountAllRegisteredCertificates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredCertificates_args = function(args) {
  this.merchantId = null;
  this.tagIds = null;
  this.filter = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ClientInformationalService_getAllRegisteredCertificates_args.prototype = {};
ClientInformationalService_getAllRegisteredCertificates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.tagIds = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = input.readString().value;
          this.tagIds.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredCertificates_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getAllRegisteredCertificates_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagIds.length);
    for (var iter373 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter373))
      {
        iter373 = this.tagIds[iter373];
        output.writeString(iter373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredCertificates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getAllRegisteredCertificates_result.prototype = {};
ClientInformationalService_getAllRegisteredCertificates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = new Certificate();
          elem380.read(input);
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getAllRegisteredCertificates_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getAllRegisteredCertificates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getRegisteredCertificateById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getRegisteredCertificateById_args.prototype = {};
ClientInformationalService_getRegisteredCertificateById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getRegisteredCertificateById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getRegisteredCertificateById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getRegisteredCertificateById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getRegisteredCertificateById_result.prototype = {};
ClientInformationalService_getRegisteredCertificateById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Certificate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getRegisteredCertificateById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getRegisteredCertificateById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCertificatePictureById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ClientInformationalService_getCertificatePictureById_args.prototype = {};
ClientInformationalService_getCertificatePictureById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCertificatePictureById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCertificatePictureById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalService_getCertificatePictureById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ClientInformationalService_getCertificatePictureById_result.prototype = {};
ClientInformationalService_getCertificatePictureById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInformationalService_getCertificatePictureById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientInformationalService_getCertificatePictureById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInformationalServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ClientInformationalServiceClient.prototype = {};
ClientInformationalServiceClient.prototype.getVersion = function() {
  this.send_getVersion();
  return this.recv_getVersion();
};

ClientInformationalServiceClient.prototype.send_getVersion = function() {
  this.output.writeMessageBegin('getVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getVersion failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountBonusPrograms = function(filter) {
  this.send_getCountBonusPrograms(filter);
  return this.recv_getCountBonusPrograms();
};

ClientInformationalServiceClient.prototype.send_getCountBonusPrograms = function(filter) {
  this.output.writeMessageBegin('getCountBonusPrograms', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountBonusPrograms_args();
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountBonusPrograms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountBonusPrograms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountBonusPrograms failed: unknown result';
};
ClientInformationalServiceClient.prototype.getBonusPrograms = function(filter) {
  this.send_getBonusPrograms(filter);
  return this.recv_getBonusPrograms();
};

ClientInformationalServiceClient.prototype.send_getBonusPrograms = function(filter) {
  this.output.writeMessageBegin('getBonusPrograms', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getBonusPrograms_args();
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getBonusPrograms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getBonusPrograms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBonusPrograms failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountSupportedBonusProgramsByMerchant = function(merchantId, filter) {
  this.send_getCountSupportedBonusProgramsByMerchant(merchantId, filter);
  return this.recv_getCountSupportedBonusProgramsByMerchant();
};

ClientInformationalServiceClient.prototype.send_getCountSupportedBonusProgramsByMerchant = function(merchantId, filter) {
  this.output.writeMessageBegin('getCountSupportedBonusProgramsByMerchant', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountSupportedBonusProgramsByMerchant_args();
  args.merchantId = merchantId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountSupportedBonusProgramsByMerchant = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountSupportedBonusProgramsByMerchant_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountSupportedBonusProgramsByMerchant failed: unknown result';
};
ClientInformationalServiceClient.prototype.getSupportedBonusProgramsByMerchant = function(merchantId, filter) {
  this.send_getSupportedBonusProgramsByMerchant(merchantId, filter);
  return this.recv_getSupportedBonusProgramsByMerchant();
};

ClientInformationalServiceClient.prototype.send_getSupportedBonusProgramsByMerchant = function(merchantId, filter) {
  this.output.writeMessageBegin('getSupportedBonusProgramsByMerchant', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getSupportedBonusProgramsByMerchant_args();
  args.merchantId = merchantId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getSupportedBonusProgramsByMerchant = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getSupportedBonusProgramsByMerchant_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSupportedBonusProgramsByMerchant failed: unknown result';
};
ClientInformationalServiceClient.prototype.getBonusProgramById = function(id) {
  this.send_getBonusProgramById(id);
  return this.recv_getBonusProgramById();
};

ClientInformationalServiceClient.prototype.send_getBonusProgramById = function(id) {
  this.output.writeMessageBegin('getBonusProgramById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getBonusProgramById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getBonusProgramById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getBonusProgramById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBonusProgramById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getBonusProgramByAlias = function(programAlias) {
  this.send_getBonusProgramByAlias(programAlias);
  return this.recv_getBonusProgramByAlias();
};

ClientInformationalServiceClient.prototype.send_getBonusProgramByAlias = function(programAlias) {
  this.output.writeMessageBegin('getBonusProgramByAlias', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getBonusProgramByAlias_args();
  args.programAlias = programAlias;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getBonusProgramByAlias = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getBonusProgramByAlias_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBonusProgramByAlias failed: unknown result';
};
ClientInformationalServiceClient.prototype.getExchangeRate = function(merchantId, programId, date) {
  this.send_getExchangeRate(merchantId, programId, date);
  return this.recv_getExchangeRate();
};

ClientInformationalServiceClient.prototype.send_getExchangeRate = function(merchantId, programId, date) {
  this.output.writeMessageBegin('getExchangeRate', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getExchangeRate_args();
  args.merchantId = merchantId;
  args.programId = programId;
  args.date = date;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getExchangeRate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getExchangeRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getExchangeRate failed: unknown result';
};
ClientInformationalServiceClient.prototype.getExchangeRateById = function(id) {
  this.send_getExchangeRateById(id);
  return this.recv_getExchangeRateById();
};

ClientInformationalServiceClient.prototype.send_getExchangeRateById = function(id) {
  this.output.writeMessageBegin('getExchangeRateById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getExchangeRateById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getExchangeRateById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getExchangeRateById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getExchangeRateById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountMerchants = function(filter) {
  this.send_getCountMerchants(filter);
  return this.recv_getCountMerchants();
};

ClientInformationalServiceClient.prototype.send_getCountMerchants = function(filter) {
  this.output.writeMessageBegin('getCountMerchants', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountMerchants_args();
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountMerchants = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountMerchants_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountMerchants failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchants = function(filter) {
  this.send_getMerchants(filter);
  return this.recv_getMerchants();
};

ClientInformationalServiceClient.prototype.send_getMerchants = function(filter) {
  this.output.writeMessageBegin('getMerchants', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchants_args();
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchants = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchants_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchants failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountMerchantsByProgram = function(programId, filter) {
  this.send_getCountMerchantsByProgram(programId, filter);
  return this.recv_getCountMerchantsByProgram();
};

ClientInformationalServiceClient.prototype.send_getCountMerchantsByProgram = function(programId, filter) {
  this.output.writeMessageBegin('getCountMerchantsByProgram', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountMerchantsByProgram_args();
  args.programId = programId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountMerchantsByProgram = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountMerchantsByProgram_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountMerchantsByProgram failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantsByProgram = function(programId, filter) {
  this.send_getMerchantsByProgram(programId, filter);
  return this.recv_getMerchantsByProgram();
};

ClientInformationalServiceClient.prototype.send_getMerchantsByProgram = function(programId, filter) {
  this.output.writeMessageBegin('getMerchantsByProgram', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantsByProgram_args();
  args.programId = programId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantsByProgram = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantsByProgram_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantsByProgram failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantById = function(id) {
  this.send_getMerchantById(id);
  return this.recv_getMerchantById();
};

ClientInformationalServiceClient.prototype.send_getMerchantById = function(id) {
  this.output.writeMessageBegin('getMerchantById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantLogoById = function(merchantId) {
  this.send_getMerchantLogoById(merchantId);
  return this.recv_getMerchantLogoById();
};

ClientInformationalServiceClient.prototype.send_getMerchantLogoById = function(merchantId) {
  this.output.writeMessageBegin('getMerchantLogoById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantLogoById_args();
  args.merchantId = merchantId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantLogoById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantLogoById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantLogoById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountMerchantPoints = function(merchantId, filter) {
  this.send_getCountMerchantPoints(merchantId, filter);
  return this.recv_getCountMerchantPoints();
};

ClientInformationalServiceClient.prototype.send_getCountMerchantPoints = function(merchantId, filter) {
  this.output.writeMessageBegin('getCountMerchantPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountMerchantPoints_args();
  args.merchantId = merchantId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountMerchantPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountMerchantPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountMerchantPoints failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantPoints = function(merchantId, filter) {
  this.send_getMerchantPoints(merchantId, filter);
  return this.recv_getMerchantPoints();
};

ClientInformationalServiceClient.prototype.send_getMerchantPoints = function(merchantId, filter) {
  this.output.writeMessageBegin('getMerchantPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantPoints_args();
  args.merchantId = merchantId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantPoints failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantPointById = function(id) {
  this.send_getMerchantPointById(id);
  return this.recv_getMerchantPointById();
};

ClientInformationalServiceClient.prototype.send_getMerchantPointById = function(id) {
  this.output.writeMessageBegin('getMerchantPointById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantPointById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantPointById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantPointById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantPointById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountAllRegisteredMerchantActions = function(merchantId, tagIds, filter) {
  this.send_getCountAllRegisteredMerchantActions(merchantId, tagIds, filter);
  return this.recv_getCountAllRegisteredMerchantActions();
};

ClientInformationalServiceClient.prototype.send_getCountAllRegisteredMerchantActions = function(merchantId, tagIds, filter) {
  this.output.writeMessageBegin('getCountAllRegisteredMerchantActions', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountAllRegisteredMerchantActions_args();
  args.merchantId = merchantId;
  args.tagIds = tagIds;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountAllRegisteredMerchantActions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountAllRegisteredMerchantActions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllRegisteredMerchantActions failed: unknown result';
};
ClientInformationalServiceClient.prototype.getAllRegisteredMerchantActions = function(merchantId, tagIds, filter) {
  this.send_getAllRegisteredMerchantActions(merchantId, tagIds, filter);
  return this.recv_getAllRegisteredMerchantActions();
};

ClientInformationalServiceClient.prototype.send_getAllRegisteredMerchantActions = function(merchantId, tagIds, filter) {
  this.output.writeMessageBegin('getAllRegisteredMerchantActions', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getAllRegisteredMerchantActions_args();
  args.merchantId = merchantId;
  args.tagIds = tagIds;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getAllRegisteredMerchantActions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getAllRegisteredMerchantActions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllRegisteredMerchantActions failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountMerchantActionsByMerchantPoint = function(merchantPointId, filter) {
  this.send_getCountMerchantActionsByMerchantPoint(merchantPointId, filter);
  return this.recv_getCountMerchantActionsByMerchantPoint();
};

ClientInformationalServiceClient.prototype.send_getCountMerchantActionsByMerchantPoint = function(merchantPointId, filter) {
  this.output.writeMessageBegin('getCountMerchantActionsByMerchantPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountMerchantActionsByMerchantPoint_args();
  args.merchantPointId = merchantPointId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountMerchantActionsByMerchantPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountMerchantActionsByMerchantPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountMerchantActionsByMerchantPoint failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantActionsByMerchantPoint = function(merchantPointId, filter) {
  this.send_getMerchantActionsByMerchantPoint(merchantPointId, filter);
  return this.recv_getMerchantActionsByMerchantPoint();
};

ClientInformationalServiceClient.prototype.send_getMerchantActionsByMerchantPoint = function(merchantPointId, filter) {
  this.output.writeMessageBegin('getMerchantActionsByMerchantPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantActionsByMerchantPoint_args();
  args.merchantPointId = merchantPointId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantActionsByMerchantPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantActionsByMerchantPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantActionsByMerchantPoint failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantActionById = function(id) {
  this.send_getMerchantActionById(id);
  return this.recv_getMerchantActionById();
};

ClientInformationalServiceClient.prototype.send_getMerchantActionById = function(id) {
  this.output.writeMessageBegin('getMerchantActionById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantActionById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantActionById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantActionById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantActionById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getMerchantActionPictureById = function(actionId) {
  this.send_getMerchantActionPictureById(actionId);
  return this.recv_getMerchantActionPictureById();
};

ClientInformationalServiceClient.prototype.send_getMerchantActionPictureById = function(actionId) {
  this.output.writeMessageBegin('getMerchantActionPictureById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getMerchantActionPictureById_args();
  args.actionId = actionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getMerchantActionPictureById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getMerchantActionPictureById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantActionPictureById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountDiscountRulesForAction = function(merchantActionId, filter) {
  this.send_getCountDiscountRulesForAction(merchantActionId, filter);
  return this.recv_getCountDiscountRulesForAction();
};

ClientInformationalServiceClient.prototype.send_getCountDiscountRulesForAction = function(merchantActionId, filter) {
  this.output.writeMessageBegin('getCountDiscountRulesForAction', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountDiscountRulesForAction_args();
  args.merchantActionId = merchantActionId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountDiscountRulesForAction = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountDiscountRulesForAction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountDiscountRulesForAction failed: unknown result';
};
ClientInformationalServiceClient.prototype.getDiscountRulesForAction = function(merchantActionId, filter) {
  this.send_getDiscountRulesForAction(merchantActionId, filter);
  return this.recv_getDiscountRulesForAction();
};

ClientInformationalServiceClient.prototype.send_getDiscountRulesForAction = function(merchantActionId, filter) {
  this.output.writeMessageBegin('getDiscountRulesForAction', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getDiscountRulesForAction_args();
  args.merchantActionId = merchantActionId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getDiscountRulesForAction = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getDiscountRulesForAction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiscountRulesForAction failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCountAllRegisteredCertificates = function(merchantId, tagIds, filter) {
  this.send_getCountAllRegisteredCertificates(merchantId, tagIds, filter);
  return this.recv_getCountAllRegisteredCertificates();
};

ClientInformationalServiceClient.prototype.send_getCountAllRegisteredCertificates = function(merchantId, tagIds, filter) {
  this.output.writeMessageBegin('getCountAllRegisteredCertificates', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCountAllRegisteredCertificates_args();
  args.merchantId = merchantId;
  args.tagIds = tagIds;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCountAllRegisteredCertificates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCountAllRegisteredCertificates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllRegisteredCertificates failed: unknown result';
};
ClientInformationalServiceClient.prototype.getAllRegisteredCertificates = function(merchantId, tagIds, filter) {
  this.send_getAllRegisteredCertificates(merchantId, tagIds, filter);
  return this.recv_getAllRegisteredCertificates();
};

ClientInformationalServiceClient.prototype.send_getAllRegisteredCertificates = function(merchantId, tagIds, filter) {
  this.output.writeMessageBegin('getAllRegisteredCertificates', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getAllRegisteredCertificates_args();
  args.merchantId = merchantId;
  args.tagIds = tagIds;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getAllRegisteredCertificates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getAllRegisteredCertificates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllRegisteredCertificates failed: unknown result';
};
ClientInformationalServiceClient.prototype.getRegisteredCertificateById = function(id) {
  this.send_getRegisteredCertificateById(id);
  return this.recv_getRegisteredCertificateById();
};

ClientInformationalServiceClient.prototype.send_getRegisteredCertificateById = function(id) {
  this.output.writeMessageBegin('getRegisteredCertificateById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getRegisteredCertificateById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getRegisteredCertificateById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getRegisteredCertificateById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRegisteredCertificateById failed: unknown result';
};
ClientInformationalServiceClient.prototype.getCertificatePictureById = function(id) {
  this.send_getCertificatePictureById(id);
  return this.recv_getCertificatePictureById();
};

ClientInformationalServiceClient.prototype.send_getCertificatePictureById = function(id) {
  this.output.writeMessageBegin('getCertificatePictureById', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientInformationalService_getCertificatePictureById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ClientInformationalServiceClient.prototype.recv_getCertificatePictureById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ClientInformationalService_getCertificatePictureById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCertificatePictureById failed: unknown result';
};
