//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MerchantBookService_getPaymentById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantBookService_getPaymentById_args.prototype = {};
MerchantBookService_getPaymentById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentById_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getPaymentById_result.prototype = {};
MerchantBookService_getPaymentById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MerchantPayment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithFromToDate_args = function(args) {
  this.token = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getCountPaymentsWithFromToDate_args.prototype = {};
MerchantBookService_getCountPaymentsWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 2);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 3);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getCountPaymentsWithFromToDate_result.prototype = {};
MerchantBookService_getCountPaymentsWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsWithFromToDate_args = function(args) {
  this.token = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getPaymentsWithFromToDate_args.prototype = {};
MerchantBookService_getPaymentsWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 2);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 3);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getPaymentsWithFromToDate_result.prototype = {};
MerchantBookService_getPaymentsWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size470 = 0;
        var _rtmp3474;
        this.success = [];
        var _etype473 = 0;
        _rtmp3474 = input.readListBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = new MerchantPayment();
          elem476.read(input);
          this.success.push(elem476);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter477 in this.success)
    {
      if (this.success.hasOwnProperty(iter477))
      {
        iter477 = this.success[iter477];
        iter477.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithLastDays_args = function(args) {
  this.token = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getCountPaymentsWithLastDays_args.prototype = {};
MerchantBookService_getCountPaymentsWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 2);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getCountPaymentsWithLastDays_result.prototype = {};
MerchantBookService_getCountPaymentsWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsWithLastDays_args = function(args) {
  this.token = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getPaymentsWithLastDays_args.prototype = {};
MerchantBookService_getPaymentsWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 2);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getPaymentsWithLastDays_result.prototype = {};
MerchantBookService_getPaymentsWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.success = [];
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = new MerchantPayment();
          elem484.read(input);
          this.success.push(elem484);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter485 in this.success)
    {
      if (this.success.hasOwnProperty(iter485))
      {
        iter485 = this.success[iter485];
        iter485.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args.prototype = {};
MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 3);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 4);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result.prototype = {};
MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args.prototype = {};
MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 3);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 4);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result.prototype = {};
MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size486 = 0;
        var _rtmp3490;
        this.success = [];
        var _etype489 = 0;
        _rtmp3490 = input.readListBegin();
        _etype489 = _rtmp3490.etype;
        _size486 = _rtmp3490.size;
        for (var _i491 = 0; _i491 < _size486; ++_i491)
        {
          var elem492 = null;
          elem492 = new MerchantPayment();
          elem492.read(input);
          this.success.push(elem492);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter493 in this.success)
    {
      if (this.success.hasOwnProperty(iter493))
      {
        iter493 = this.success[iter493];
        iter493.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args.prototype = {};
MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 3);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result.prototype = {};
MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithLastDays_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantBookService_getPaymentsByMerchantPointWithLastDays_args.prototype = {};
MerchantBookService_getPaymentsByMerchantPointWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsByMerchantPointWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 3);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantBookService_getPaymentsByMerchantPointWithLastDays_result.prototype = {};
MerchantBookService_getPaymentsByMerchantPointWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size494 = 0;
        var _rtmp3498;
        this.success = [];
        var _etype497 = 0;
        _rtmp3498 = input.readListBegin();
        _etype497 = _rtmp3498.etype;
        _size494 = _rtmp3498.size;
        for (var _i499 = 0; _i499 < _size494; ++_i499)
        {
          var elem500 = null;
          elem500 = new MerchantPayment();
          elem500.read(input);
          this.success.push(elem500);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantBookService_getPaymentsByMerchantPointWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantBookService_getPaymentsByMerchantPointWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter501 in this.success)
    {
      if (this.success.hasOwnProperty(iter501))
      {
        iter501 = this.success[iter501];
        iter501.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantBookServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MerchantBookServiceClient.prototype = {};
MerchantBookServiceClient.prototype.getPaymentById = function(token, id) {
  this.send_getPaymentById(token, id);
  return this.recv_getPaymentById();
};

MerchantBookServiceClient.prototype.send_getPaymentById = function(token, id) {
  this.output.writeMessageBegin('getPaymentById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getPaymentById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getPaymentById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getPaymentById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaymentById failed: unknown result';
};
MerchantBookServiceClient.prototype.getCountPaymentsWithFromToDate = function(token, dateFrom, dateTo, filter) {
  this.send_getCountPaymentsWithFromToDate(token, dateFrom, dateTo, filter);
  return this.recv_getCountPaymentsWithFromToDate();
};

MerchantBookServiceClient.prototype.send_getCountPaymentsWithFromToDate = function(token, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getCountPaymentsWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getCountPaymentsWithFromToDate_args();
  args.token = token;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getCountPaymentsWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getCountPaymentsWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountPaymentsWithFromToDate failed: unknown result';
};
MerchantBookServiceClient.prototype.getPaymentsWithFromToDate = function(token, dateFrom, dateTo, filter) {
  this.send_getPaymentsWithFromToDate(token, dateFrom, dateTo, filter);
  return this.recv_getPaymentsWithFromToDate();
};

MerchantBookServiceClient.prototype.send_getPaymentsWithFromToDate = function(token, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getPaymentsWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getPaymentsWithFromToDate_args();
  args.token = token;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getPaymentsWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getPaymentsWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaymentsWithFromToDate failed: unknown result';
};
MerchantBookServiceClient.prototype.getCountPaymentsWithLastDays = function(token, lastDays, filter) {
  this.send_getCountPaymentsWithLastDays(token, lastDays, filter);
  return this.recv_getCountPaymentsWithLastDays();
};

MerchantBookServiceClient.prototype.send_getCountPaymentsWithLastDays = function(token, lastDays, filter) {
  this.output.writeMessageBegin('getCountPaymentsWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getCountPaymentsWithLastDays_args();
  args.token = token;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getCountPaymentsWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getCountPaymentsWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountPaymentsWithLastDays failed: unknown result';
};
MerchantBookServiceClient.prototype.getPaymentsWithLastDays = function(token, lastDays, filter) {
  this.send_getPaymentsWithLastDays(token, lastDays, filter);
  return this.recv_getPaymentsWithLastDays();
};

MerchantBookServiceClient.prototype.send_getPaymentsWithLastDays = function(token, lastDays, filter) {
  this.output.writeMessageBegin('getPaymentsWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getPaymentsWithLastDays_args();
  args.token = token;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getPaymentsWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getPaymentsWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaymentsWithLastDays failed: unknown result';
};
MerchantBookServiceClient.prototype.getCountPaymentsByMerchantPointWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.send_getCountPaymentsByMerchantPointWithFromToDate(token, merchantPointId, dateFrom, dateTo, filter);
  return this.recv_getCountPaymentsByMerchantPointWithFromToDate();
};

MerchantBookServiceClient.prototype.send_getCountPaymentsByMerchantPointWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getCountPaymentsByMerchantPointWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getCountPaymentsByMerchantPointWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getCountPaymentsByMerchantPointWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountPaymentsByMerchantPointWithFromToDate failed: unknown result';
};
MerchantBookServiceClient.prototype.getPaymentsByMerchantPointWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.send_getPaymentsByMerchantPointWithFromToDate(token, merchantPointId, dateFrom, dateTo, filter);
  return this.recv_getPaymentsByMerchantPointWithFromToDate();
};

MerchantBookServiceClient.prototype.send_getPaymentsByMerchantPointWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getPaymentsByMerchantPointWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getPaymentsByMerchantPointWithFromToDate_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getPaymentsByMerchantPointWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getPaymentsByMerchantPointWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaymentsByMerchantPointWithFromToDate failed: unknown result';
};
MerchantBookServiceClient.prototype.getCountPaymentsByMerchantPointWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.send_getCountPaymentsByMerchantPointWithLastDays(token, merchantPointId, lastDays, filter);
  return this.recv_getCountPaymentsByMerchantPointWithLastDays();
};

MerchantBookServiceClient.prototype.send_getCountPaymentsByMerchantPointWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.output.writeMessageBegin('getCountPaymentsByMerchantPointWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getCountPaymentsByMerchantPointWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getCountPaymentsByMerchantPointWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountPaymentsByMerchantPointWithLastDays failed: unknown result';
};
MerchantBookServiceClient.prototype.getPaymentsByMerchantPointWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.send_getPaymentsByMerchantPointWithLastDays(token, merchantPointId, lastDays, filter);
  return this.recv_getPaymentsByMerchantPointWithLastDays();
};

MerchantBookServiceClient.prototype.send_getPaymentsByMerchantPointWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.output.writeMessageBegin('getPaymentsByMerchantPointWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantBookService_getPaymentsByMerchantPointWithLastDays_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantBookServiceClient.prototype.recv_getPaymentsByMerchantPointWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantBookService_getPaymentsByMerchantPointWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaymentsByMerchantPointWithLastDays failed: unknown result';
};
