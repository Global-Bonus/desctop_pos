//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MerchantAdminService_createOrUpdateMerchantPoint_args = function(args) {
  this.token = null;
  this.merchantPoint = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPoint !== undefined) {
      this.merchantPoint = args.merchantPoint;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantPoint_args.prototype = {};
MerchantAdminService_createOrUpdateMerchantPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.merchantPoint = new MerchantPoint();
        this.merchantPoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantPoint_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantPoint_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPoint !== null && this.merchantPoint !== undefined) {
    output.writeFieldBegin('merchantPoint', Thrift.Type.STRUCT, 2);
    this.merchantPoint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantPoint_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantPoint_result.prototype = {};
MerchantAdminService_createOrUpdateMerchantPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MerchantPoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantPoint_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantPointById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deleteMerchantPointById_args.prototype = {};
MerchantAdminService_deleteMerchantPointById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantPointById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantPointById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantPointById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteMerchantPointById_result.prototype = {};
MerchantAdminService_deleteMerchantPointById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantPointById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantPointById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantLogo_args = function(args) {
  this.token = null;
  this.logo = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.logo !== undefined) {
      this.logo = args.logo;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantLogo_args.prototype = {};
MerchantAdminService_createOrUpdateMerchantLogo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.logo = new Picture();
        this.logo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantLogo_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantLogo_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRUCT, 2);
    this.logo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantLogo_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantLogo_result.prototype = {};
MerchantAdminService_createOrUpdateMerchantLogo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantLogo_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantLogo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantLogo_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
MerchantAdminService_deleteMerchantLogo_args.prototype = {};
MerchantAdminService_deleteMerchantLogo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantLogo_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantLogo_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantLogo_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteMerchantLogo_result.prototype = {};
MerchantAdminService_deleteMerchantLogo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantLogo_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantLogo_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantAction_args = function(args) {
  this.token = null;
  this.merchantAction = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantAction !== undefined) {
      this.merchantAction = args.merchantAction;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantAction_args.prototype = {};
MerchantAdminService_createOrUpdateMerchantAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.merchantAction = new MerchantAction();
        this.merchantAction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantAction_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantAction_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantAction !== null && this.merchantAction !== undefined) {
    output.writeFieldBegin('merchantAction', Thrift.Type.STRUCT, 2);
    this.merchantAction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantAction_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantAction_result.prototype = {};
MerchantAdminService_createOrUpdateMerchantAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MerchantAction();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantAction_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantAction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActions_args = function(args) {
  this.token = null;
  this.actions = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.actions !== undefined) {
      this.actions = args.actions;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantActions_args.prototype = {};
MerchantAdminService_createOrUpdateMerchantActions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.actions = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new MerchantAction();
          elem388.read(input);
          this.actions.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActions_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantActions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.actions !== null && this.actions !== undefined) {
    output.writeFieldBegin('actions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.actions.length);
    for (var iter389 in this.actions)
    {
      if (this.actions.hasOwnProperty(iter389))
      {
        iter389 = this.actions[iter389];
        iter389.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActions_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantActions_result.prototype = {};
MerchantAdminService_createOrUpdateMerchantActions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = [];
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = new MerchantAction();
          elem396.read(input);
          this.success.push(elem396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActions_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantActions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        iter397.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deleteMerchantActionById_args.prototype = {};
MerchantAdminService_deleteMerchantActionById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantActionById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteMerchantActionById_result.prototype = {};
MerchantAdminService_deleteMerchantActionById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantActionById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActionPicture_args = function(args) {
  this.token = null;
  this.merchantActionId = null;
  this.logo = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.logo !== undefined) {
      this.logo = args.logo;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantActionPicture_args.prototype = {};
MerchantAdminService_createOrUpdateMerchantActionPicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logo = new Picture();
        this.logo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActionPicture_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantActionPicture_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRUCT, 3);
    this.logo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActionPicture_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateMerchantActionPicture_result.prototype = {};
MerchantAdminService_createOrUpdateMerchantActionPicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateMerchantActionPicture_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateMerchantActionPicture_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionPicture_args = function(args) {
  this.token = null;
  this.merchantActionId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
  }
};
MerchantAdminService_deleteMerchantActionPicture_args.prototype = {};
MerchantAdminService_deleteMerchantActionPicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionPicture_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantActionPicture_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionPicture_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteMerchantActionPicture_result.prototype = {};
MerchantAdminService_deleteMerchantActionPicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteMerchantActionPicture_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteMerchantActionPicture_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificatePicture_args = function(args) {
  this.token = null;
  this.certificateId = null;
  this.logo = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.certificateId !== undefined) {
      this.certificateId = args.certificateId;
    }
    if (args.logo !== undefined) {
      this.logo = args.logo;
    }
  }
};
MerchantAdminService_createOrUpdateCertificatePicture_args.prototype = {};
MerchantAdminService_createOrUpdateCertificatePicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logo = new Picture();
        this.logo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificatePicture_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateCertificatePicture_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.certificateId !== null && this.certificateId !== undefined) {
    output.writeFieldBegin('certificateId', Thrift.Type.STRING, 2);
    output.writeString(this.certificateId);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRUCT, 3);
    this.logo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificatePicture_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateCertificatePicture_result.prototype = {};
MerchantAdminService_createOrUpdateCertificatePicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Picture();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificatePicture_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateCertificatePicture_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteCertificatePicture_args = function(args) {
  this.token = null;
  this.certificateId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.certificateId !== undefined) {
      this.certificateId = args.certificateId;
    }
  }
};
MerchantAdminService_deleteCertificatePicture_args.prototype = {};
MerchantAdminService_deleteCertificatePicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteCertificatePicture_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteCertificatePicture_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.certificateId !== null && this.certificateId !== undefined) {
    output.writeFieldBegin('certificateId', Thrift.Type.STRING, 2);
    output.writeString(this.certificateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteCertificatePicture_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteCertificatePicture_result.prototype = {};
MerchantAdminService_deleteCertificatePicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteCertificatePicture_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteCertificatePicture_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificate_args = function(args) {
  this.token = null;
  this.certificate = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.certificate !== undefined) {
      this.certificate = args.certificate;
    }
  }
};
MerchantAdminService_createOrUpdateCertificate_args.prototype = {};
MerchantAdminService_createOrUpdateCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.certificate = new Certificate();
        this.certificate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateCertificate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRUCT, 2);
    this.certificate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateCertificate_result.prototype = {};
MerchantAdminService_createOrUpdateCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Certificate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateListCertificates_args = function(args) {
  this.token = null;
  this.certificates = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.certificates !== undefined) {
      this.certificates = args.certificates;
    }
  }
};
MerchantAdminService_createOrUpdateListCertificates_args.prototype = {};
MerchantAdminService_createOrUpdateListCertificates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.certificates = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = new Certificate();
          elem404.read(input);
          this.certificates.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateListCertificates_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateListCertificates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.certificates !== null && this.certificates !== undefined) {
    output.writeFieldBegin('certificates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.certificates.length);
    for (var iter405 in this.certificates)
    {
      if (this.certificates.hasOwnProperty(iter405))
      {
        iter405 = this.certificates[iter405];
        iter405.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateListCertificates_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateListCertificates_result.prototype = {};
MerchantAdminService_createOrUpdateListCertificates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = [];
        var _etype409 = 0;
        _rtmp3410 = input.readListBegin();
        _etype409 = _rtmp3410.etype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          var elem412 = null;
          elem412 = new Certificate();
          elem412.read(input);
          this.success.push(elem412);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateListCertificates_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateListCertificates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter413 in this.success)
    {
      if (this.success.hasOwnProperty(iter413))
      {
        iter413 = this.success[iter413];
        iter413.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteCertificateById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deleteCertificateById_args.prototype = {};
MerchantAdminService_deleteCertificateById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteCertificateById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteCertificateById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteCertificateById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteCertificateById_result.prototype = {};
MerchantAdminService_deleteCertificateById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteCertificateById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteCertificateById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateUser_args = function(args) {
  this.token = null;
  this.user = null;
  this.newPassword = null;
  this.confirmation = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.newPassword !== undefined) {
      this.newPassword = args.newPassword;
    }
    if (args.confirmation !== undefined) {
      this.confirmation = args.confirmation;
    }
  }
};
MerchantAdminService_createOrUpdateUser_args.prototype = {};
MerchantAdminService_createOrUpdateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.confirmation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateUser_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 3);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  if (this.confirmation !== null && this.confirmation !== undefined) {
    output.writeFieldBegin('confirmation', Thrift.Type.STRING, 4);
    output.writeString(this.confirmation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateUser_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateUser_result.prototype = {};
MerchantAdminService_createOrUpdateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateUser_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUserById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_getUserById_args.prototype = {};
MerchantAdminService_getUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUserById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUserById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUserById_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getUserById_result.prototype = {};
MerchantAdminService_getUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUserById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteUserById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deleteUserById_args.prototype = {};
MerchantAdminService_deleteUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteUserById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteUserById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteUserById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteUserById_result.prototype = {};
MerchantAdminService_deleteUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteUserById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteUserById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deactivateUserById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deactivateUserById_args.prototype = {};
MerchantAdminService_deactivateUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deactivateUserById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deactivateUserById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deactivateUserById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deactivateUserById_result.prototype = {};
MerchantAdminService_deactivateUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deactivateUserById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deactivateUserById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_activateUserById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_activateUserById_args.prototype = {};
MerchantAdminService_activateUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_activateUserById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_activateUserById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_activateUserById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_activateUserById_result.prototype = {};
MerchantAdminService_activateUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_activateUserById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_activateUserById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchant_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getCountUsersByMerchant_args.prototype = {};
MerchantAdminService_getCountUsersByMerchant_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchant_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountUsersByMerchant_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchant_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getCountUsersByMerchant_result.prototype = {};
MerchantAdminService_getCountUsersByMerchant_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchant_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountUsersByMerchant_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchant_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getUsersByMerchant_args.prototype = {};
MerchantAdminService_getUsersByMerchant_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchant_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUsersByMerchant_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchant_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getUsersByMerchant_result.prototype = {};
MerchantAdminService_getUsersByMerchant_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size414 = 0;
        var _rtmp3418;
        this.success = [];
        var _etype417 = 0;
        _rtmp3418 = input.readListBegin();
        _etype417 = _rtmp3418.etype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var elem420 = null;
          elem420 = new User();
          elem420.read(input);
          this.success.push(elem420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchant_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUsersByMerchant_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter421 in this.success)
    {
      if (this.success.hasOwnProperty(iter421))
      {
        iter421 = this.success[iter421];
        iter421.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchantPoint_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getCountUsersByMerchantPoint_args.prototype = {};
MerchantAdminService_getCountUsersByMerchantPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchantPoint_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountUsersByMerchantPoint_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchantPoint_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getCountUsersByMerchantPoint_result.prototype = {};
MerchantAdminService_getCountUsersByMerchantPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountUsersByMerchantPoint_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountUsersByMerchantPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchantPoint_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getUsersByMerchantPoint_args.prototype = {};
MerchantAdminService_getUsersByMerchantPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchantPoint_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUsersByMerchantPoint_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchantPoint_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getUsersByMerchantPoint_result.prototype = {};
MerchantAdminService_getUsersByMerchantPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size422 = 0;
        var _rtmp3426;
        this.success = [];
        var _etype425 = 0;
        _rtmp3426 = input.readListBegin();
        _etype425 = _rtmp3426.etype;
        _size422 = _rtmp3426.size;
        for (var _i427 = 0; _i427 < _size422; ++_i427)
        {
          var elem428 = null;
          elem428 = new User();
          elem428.read(input);
          this.success.push(elem428);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getUsersByMerchantPoint_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getUsersByMerchantPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter429 in this.success)
    {
      if (this.success.hasOwnProperty(iter429))
      {
        iter429 = this.success[iter429];
        iter429.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountMerchantPointsByUser_args = function(args) {
  this.token = null;
  this.userId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getCountMerchantPointsByUser_args.prototype = {};
MerchantAdminService_getCountMerchantPointsByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountMerchantPointsByUser_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountMerchantPointsByUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountMerchantPointsByUser_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getCountMerchantPointsByUser_result.prototype = {};
MerchantAdminService_getCountMerchantPointsByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountMerchantPointsByUser_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountMerchantPointsByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getMerchantPointsByUser_args = function(args) {
  this.token = null;
  this.userId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getMerchantPointsByUser_args.prototype = {};
MerchantAdminService_getMerchantPointsByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getMerchantPointsByUser_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getMerchantPointsByUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getMerchantPointsByUser_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getMerchantPointsByUser_result.prototype = {};
MerchantAdminService_getMerchantPointsByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size430 = 0;
        var _rtmp3434;
        this.success = [];
        var _etype433 = 0;
        _rtmp3434 = input.readListBegin();
        _etype433 = _rtmp3434.etype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          var elem436 = null;
          elem436 = new MerchantPoint();
          elem436.read(input);
          this.success.push(elem436);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getMerchantPointsByUser_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getMerchantPointsByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter437 in this.success)
    {
      if (this.success.hasOwnProperty(iter437))
      {
        iter437 = this.success[iter437];
        iter437.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_attachMerchantPointToUser_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.UserId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.UserId !== undefined) {
      this.UserId = args.UserId;
    }
  }
};
MerchantAdminService_attachMerchantPointToUser_args.prototype = {};
MerchantAdminService_attachMerchantPointToUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.UserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_attachMerchantPointToUser_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_attachMerchantPointToUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.UserId !== null && this.UserId !== undefined) {
    output.writeFieldBegin('UserId', Thrift.Type.STRING, 3);
    output.writeString(this.UserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_attachMerchantPointToUser_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_attachMerchantPointToUser_result.prototype = {};
MerchantAdminService_attachMerchantPointToUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_attachMerchantPointToUser_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_attachMerchantPointToUser_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deattachMerchantPointFromUser_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.UserId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.UserId !== undefined) {
      this.UserId = args.UserId;
    }
  }
};
MerchantAdminService_deattachMerchantPointFromUser_args.prototype = {};
MerchantAdminService_deattachMerchantPointFromUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.UserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deattachMerchantPointFromUser_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deattachMerchantPointFromUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.UserId !== null && this.UserId !== undefined) {
    output.writeFieldBegin('UserId', Thrift.Type.STRING, 3);
    output.writeString(this.UserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deattachMerchantPointFromUser_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deattachMerchantPointFromUser_result.prototype = {};
MerchantAdminService_deattachMerchantPointFromUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deattachMerchantPointFromUser_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deattachMerchantPointFromUser_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateDiscountRule_args = function(args) {
  this.token = null;
  this.discountRule = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.discountRule !== undefined) {
      this.discountRule = args.discountRule;
    }
  }
};
MerchantAdminService_createOrUpdateDiscountRule_args.prototype = {};
MerchantAdminService_createOrUpdateDiscountRule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.discountRule = new DiscountRule();
        this.discountRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateDiscountRule_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateDiscountRule_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.discountRule !== null && this.discountRule !== undefined) {
    output.writeFieldBegin('discountRule', Thrift.Type.STRUCT, 2);
    this.discountRule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_createOrUpdateDiscountRule_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_createOrUpdateDiscountRule_result.prototype = {};
MerchantAdminService_createOrUpdateDiscountRule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DiscountRule();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_createOrUpdateDiscountRule_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_createOrUpdateDiscountRule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getDiscountRuleById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_getDiscountRuleById_args.prototype = {};
MerchantAdminService_getDiscountRuleById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getDiscountRuleById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getDiscountRuleById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getDiscountRuleById_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getDiscountRuleById_result.prototype = {};
MerchantAdminService_getDiscountRuleById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DiscountRule();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getDiscountRuleById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getDiscountRuleById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountDiscountRules_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.merchantActionId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getCountDiscountRules_args.prototype = {};
MerchantAdminService_getCountDiscountRules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountDiscountRules_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountDiscountRules_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getCountDiscountRules_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getCountDiscountRules_result.prototype = {};
MerchantAdminService_getCountDiscountRules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getCountDiscountRules_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getCountDiscountRules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getDiscountRules_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.merchantActionId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantAdminService_getDiscountRules_args.prototype = {};
MerchantAdminService_getDiscountRules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getDiscountRules_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getDiscountRules_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_getDiscountRules_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_getDiscountRules_result.prototype = {};
MerchantAdminService_getDiscountRules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size438 = 0;
        var _rtmp3442;
        this.success = [];
        var _etype441 = 0;
        _rtmp3442 = input.readListBegin();
        _etype441 = _rtmp3442.etype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          var elem444 = null;
          elem444 = new DiscountRule();
          elem444.read(input);
          this.success.push(elem444);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_getDiscountRules_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_getDiscountRules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter445 in this.success)
    {
      if (this.success.hasOwnProperty(iter445))
      {
        iter445 = this.success[iter445];
        iter445.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteDiscountRuleById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantAdminService_deleteDiscountRuleById_args.prototype = {};
MerchantAdminService_deleteDiscountRuleById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteDiscountRuleById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteDiscountRuleById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminService_deleteDiscountRuleById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantAdminService_deleteDiscountRuleById_result.prototype = {};
MerchantAdminService_deleteDiscountRuleById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAdminService_deleteDiscountRuleById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantAdminService_deleteDiscountRuleById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAdminServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MerchantAdminServiceClient.prototype = {};
MerchantAdminServiceClient.prototype.createOrUpdateMerchantPoint = function(token, merchantPoint) {
  this.send_createOrUpdateMerchantPoint(token, merchantPoint);
  return this.recv_createOrUpdateMerchantPoint();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateMerchantPoint = function(token, merchantPoint) {
  this.output.writeMessageBegin('createOrUpdateMerchantPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateMerchantPoint_args();
  args.token = token;
  args.merchantPoint = merchantPoint;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateMerchantPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateMerchantPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMerchantPoint failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteMerchantPointById = function(token, id) {
  this.send_deleteMerchantPointById(token, id);
  this.recv_deleteMerchantPointById();
};

MerchantAdminServiceClient.prototype.send_deleteMerchantPointById = function(token, id) {
  this.output.writeMessageBegin('deleteMerchantPointById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteMerchantPointById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteMerchantPointById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteMerchantPointById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateMerchantLogo = function(token, logo) {
  this.send_createOrUpdateMerchantLogo(token, logo);
  return this.recv_createOrUpdateMerchantLogo();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateMerchantLogo = function(token, logo) {
  this.output.writeMessageBegin('createOrUpdateMerchantLogo', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateMerchantLogo_args();
  args.token = token;
  args.logo = logo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateMerchantLogo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateMerchantLogo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMerchantLogo failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteMerchantLogo = function(token) {
  this.send_deleteMerchantLogo(token);
  this.recv_deleteMerchantLogo();
};

MerchantAdminServiceClient.prototype.send_deleteMerchantLogo = function(token) {
  this.output.writeMessageBegin('deleteMerchantLogo', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteMerchantLogo_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteMerchantLogo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteMerchantLogo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateMerchantAction = function(token, merchantAction) {
  this.send_createOrUpdateMerchantAction(token, merchantAction);
  return this.recv_createOrUpdateMerchantAction();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateMerchantAction = function(token, merchantAction) {
  this.output.writeMessageBegin('createOrUpdateMerchantAction', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateMerchantAction_args();
  args.token = token;
  args.merchantAction = merchantAction;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateMerchantAction = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateMerchantAction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMerchantAction failed: unknown result';
};
MerchantAdminServiceClient.prototype.createOrUpdateMerchantActions = function(token, actions) {
  this.send_createOrUpdateMerchantActions(token, actions);
  return this.recv_createOrUpdateMerchantActions();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateMerchantActions = function(token, actions) {
  this.output.writeMessageBegin('createOrUpdateMerchantActions', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateMerchantActions_args();
  args.token = token;
  args.actions = actions;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateMerchantActions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateMerchantActions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMerchantActions failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteMerchantActionById = function(token, id) {
  this.send_deleteMerchantActionById(token, id);
  this.recv_deleteMerchantActionById();
};

MerchantAdminServiceClient.prototype.send_deleteMerchantActionById = function(token, id) {
  this.output.writeMessageBegin('deleteMerchantActionById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteMerchantActionById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteMerchantActionById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteMerchantActionById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateMerchantActionPicture = function(token, merchantActionId, logo) {
  this.send_createOrUpdateMerchantActionPicture(token, merchantActionId, logo);
  return this.recv_createOrUpdateMerchantActionPicture();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateMerchantActionPicture = function(token, merchantActionId, logo) {
  this.output.writeMessageBegin('createOrUpdateMerchantActionPicture', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateMerchantActionPicture_args();
  args.token = token;
  args.merchantActionId = merchantActionId;
  args.logo = logo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateMerchantActionPicture = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateMerchantActionPicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMerchantActionPicture failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteMerchantActionPicture = function(token, merchantActionId) {
  this.send_deleteMerchantActionPicture(token, merchantActionId);
  this.recv_deleteMerchantActionPicture();
};

MerchantAdminServiceClient.prototype.send_deleteMerchantActionPicture = function(token, merchantActionId) {
  this.output.writeMessageBegin('deleteMerchantActionPicture', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteMerchantActionPicture_args();
  args.token = token;
  args.merchantActionId = merchantActionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteMerchantActionPicture = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteMerchantActionPicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateCertificatePicture = function(token, certificateId, logo) {
  this.send_createOrUpdateCertificatePicture(token, certificateId, logo);
  return this.recv_createOrUpdateCertificatePicture();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateCertificatePicture = function(token, certificateId, logo) {
  this.output.writeMessageBegin('createOrUpdateCertificatePicture', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateCertificatePicture_args();
  args.token = token;
  args.certificateId = certificateId;
  args.logo = logo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateCertificatePicture = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateCertificatePicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCertificatePicture failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteCertificatePicture = function(token, certificateId) {
  this.send_deleteCertificatePicture(token, certificateId);
  this.recv_deleteCertificatePicture();
};

MerchantAdminServiceClient.prototype.send_deleteCertificatePicture = function(token, certificateId) {
  this.output.writeMessageBegin('deleteCertificatePicture', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteCertificatePicture_args();
  args.token = token;
  args.certificateId = certificateId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteCertificatePicture = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteCertificatePicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateCertificate = function(token, certificate) {
  this.send_createOrUpdateCertificate(token, certificate);
  return this.recv_createOrUpdateCertificate();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateCertificate = function(token, certificate) {
  this.output.writeMessageBegin('createOrUpdateCertificate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateCertificate_args();
  args.token = token;
  args.certificate = certificate;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateCertificate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateCertificate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCertificate failed: unknown result';
};
MerchantAdminServiceClient.prototype.createOrUpdateListCertificates = function(token, certificates) {
  this.send_createOrUpdateListCertificates(token, certificates);
  return this.recv_createOrUpdateListCertificates();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateListCertificates = function(token, certificates) {
  this.output.writeMessageBegin('createOrUpdateListCertificates', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateListCertificates_args();
  args.token = token;
  args.certificates = certificates;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateListCertificates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateListCertificates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateListCertificates failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteCertificateById = function(token, id) {
  this.send_deleteCertificateById(token, id);
  this.recv_deleteCertificateById();
};

MerchantAdminServiceClient.prototype.send_deleteCertificateById = function(token, id) {
  this.output.writeMessageBegin('deleteCertificateById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteCertificateById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteCertificateById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteCertificateById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateUser = function(token, user, newPassword, confirmation) {
  this.send_createOrUpdateUser(token, user, newPassword, confirmation);
  return this.recv_createOrUpdateUser();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateUser = function(token, user, newPassword, confirmation) {
  this.output.writeMessageBegin('createOrUpdateUser', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateUser_args();
  args.token = token;
  args.user = user;
  args.newPassword = newPassword;
  args.confirmation = confirmation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateUser failed: unknown result';
};
MerchantAdminServiceClient.prototype.getUserById = function(token, id) {
  this.send_getUserById(token, id);
  return this.recv_getUserById();
};

MerchantAdminServiceClient.prototype.send_getUserById = function(token, id) {
  this.output.writeMessageBegin('getUserById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getUserById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getUserById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getUserById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserById failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteUserById = function(token, id) {
  this.send_deleteUserById(token, id);
  this.recv_deleteUserById();
};

MerchantAdminServiceClient.prototype.send_deleteUserById = function(token, id) {
  this.output.writeMessageBegin('deleteUserById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteUserById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteUserById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteUserById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.deactivateUserById = function(token, id) {
  this.send_deactivateUserById(token, id);
  this.recv_deactivateUserById();
};

MerchantAdminServiceClient.prototype.send_deactivateUserById = function(token, id) {
  this.output.writeMessageBegin('deactivateUserById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deactivateUserById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deactivateUserById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deactivateUserById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.activateUserById = function(token, id) {
  this.send_activateUserById(token, id);
  this.recv_activateUserById();
};

MerchantAdminServiceClient.prototype.send_activateUserById = function(token, id) {
  this.output.writeMessageBegin('activateUserById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_activateUserById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_activateUserById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_activateUserById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.getCountUsersByMerchant = function(token, filter) {
  this.send_getCountUsersByMerchant(token, filter);
  return this.recv_getCountUsersByMerchant();
};

MerchantAdminServiceClient.prototype.send_getCountUsersByMerchant = function(token, filter) {
  this.output.writeMessageBegin('getCountUsersByMerchant', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getCountUsersByMerchant_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getCountUsersByMerchant = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getCountUsersByMerchant_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountUsersByMerchant failed: unknown result';
};
MerchantAdminServiceClient.prototype.getUsersByMerchant = function(token, filter) {
  this.send_getUsersByMerchant(token, filter);
  return this.recv_getUsersByMerchant();
};

MerchantAdminServiceClient.prototype.send_getUsersByMerchant = function(token, filter) {
  this.output.writeMessageBegin('getUsersByMerchant', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getUsersByMerchant_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getUsersByMerchant = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getUsersByMerchant_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsersByMerchant failed: unknown result';
};
MerchantAdminServiceClient.prototype.getCountUsersByMerchantPoint = function(token, merchantPointId, filter) {
  this.send_getCountUsersByMerchantPoint(token, merchantPointId, filter);
  return this.recv_getCountUsersByMerchantPoint();
};

MerchantAdminServiceClient.prototype.send_getCountUsersByMerchantPoint = function(token, merchantPointId, filter) {
  this.output.writeMessageBegin('getCountUsersByMerchantPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getCountUsersByMerchantPoint_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getCountUsersByMerchantPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getCountUsersByMerchantPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountUsersByMerchantPoint failed: unknown result';
};
MerchantAdminServiceClient.prototype.getUsersByMerchantPoint = function(token, merchantPointId, filter) {
  this.send_getUsersByMerchantPoint(token, merchantPointId, filter);
  return this.recv_getUsersByMerchantPoint();
};

MerchantAdminServiceClient.prototype.send_getUsersByMerchantPoint = function(token, merchantPointId, filter) {
  this.output.writeMessageBegin('getUsersByMerchantPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getUsersByMerchantPoint_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getUsersByMerchantPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getUsersByMerchantPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsersByMerchantPoint failed: unknown result';
};
MerchantAdminServiceClient.prototype.getCountMerchantPointsByUser = function(token, userId, filter) {
  this.send_getCountMerchantPointsByUser(token, userId, filter);
  return this.recv_getCountMerchantPointsByUser();
};

MerchantAdminServiceClient.prototype.send_getCountMerchantPointsByUser = function(token, userId, filter) {
  this.output.writeMessageBegin('getCountMerchantPointsByUser', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getCountMerchantPointsByUser_args();
  args.token = token;
  args.userId = userId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getCountMerchantPointsByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getCountMerchantPointsByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountMerchantPointsByUser failed: unknown result';
};
MerchantAdminServiceClient.prototype.getMerchantPointsByUser = function(token, userId, filter) {
  this.send_getMerchantPointsByUser(token, userId, filter);
  return this.recv_getMerchantPointsByUser();
};

MerchantAdminServiceClient.prototype.send_getMerchantPointsByUser = function(token, userId, filter) {
  this.output.writeMessageBegin('getMerchantPointsByUser', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getMerchantPointsByUser_args();
  args.token = token;
  args.userId = userId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getMerchantPointsByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getMerchantPointsByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMerchantPointsByUser failed: unknown result';
};
MerchantAdminServiceClient.prototype.attachMerchantPointToUser = function(token, merchantPointId, UserId) {
  this.send_attachMerchantPointToUser(token, merchantPointId, UserId);
  this.recv_attachMerchantPointToUser();
};

MerchantAdminServiceClient.prototype.send_attachMerchantPointToUser = function(token, merchantPointId, UserId) {
  this.output.writeMessageBegin('attachMerchantPointToUser', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_attachMerchantPointToUser_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.UserId = UserId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_attachMerchantPointToUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_attachMerchantPointToUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.deattachMerchantPointFromUser = function(token, merchantPointId, UserId) {
  this.send_deattachMerchantPointFromUser(token, merchantPointId, UserId);
  this.recv_deattachMerchantPointFromUser();
};

MerchantAdminServiceClient.prototype.send_deattachMerchantPointFromUser = function(token, merchantPointId, UserId) {
  this.output.writeMessageBegin('deattachMerchantPointFromUser', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deattachMerchantPointFromUser_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.UserId = UserId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deattachMerchantPointFromUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deattachMerchantPointFromUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantAdminServiceClient.prototype.createOrUpdateDiscountRule = function(token, discountRule) {
  this.send_createOrUpdateDiscountRule(token, discountRule);
  return this.recv_createOrUpdateDiscountRule();
};

MerchantAdminServiceClient.prototype.send_createOrUpdateDiscountRule = function(token, discountRule) {
  this.output.writeMessageBegin('createOrUpdateDiscountRule', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_createOrUpdateDiscountRule_args();
  args.token = token;
  args.discountRule = discountRule;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_createOrUpdateDiscountRule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_createOrUpdateDiscountRule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDiscountRule failed: unknown result';
};
MerchantAdminServiceClient.prototype.getDiscountRuleById = function(token, id) {
  this.send_getDiscountRuleById(token, id);
  return this.recv_getDiscountRuleById();
};

MerchantAdminServiceClient.prototype.send_getDiscountRuleById = function(token, id) {
  this.output.writeMessageBegin('getDiscountRuleById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getDiscountRuleById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getDiscountRuleById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getDiscountRuleById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiscountRuleById failed: unknown result';
};
MerchantAdminServiceClient.prototype.getCountDiscountRules = function(token, merchantPointId, merchantActionId, filter) {
  this.send_getCountDiscountRules(token, merchantPointId, merchantActionId, filter);
  return this.recv_getCountDiscountRules();
};

MerchantAdminServiceClient.prototype.send_getCountDiscountRules = function(token, merchantPointId, merchantActionId, filter) {
  this.output.writeMessageBegin('getCountDiscountRules', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getCountDiscountRules_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.merchantActionId = merchantActionId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getCountDiscountRules = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getCountDiscountRules_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountDiscountRules failed: unknown result';
};
MerchantAdminServiceClient.prototype.getDiscountRules = function(token, merchantPointId, merchantActionId, filter) {
  this.send_getDiscountRules(token, merchantPointId, merchantActionId, filter);
  return this.recv_getDiscountRules();
};

MerchantAdminServiceClient.prototype.send_getDiscountRules = function(token, merchantPointId, merchantActionId, filter) {
  this.output.writeMessageBegin('getDiscountRules', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_getDiscountRules_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.merchantActionId = merchantActionId;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_getDiscountRules = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_getDiscountRules_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiscountRules failed: unknown result';
};
MerchantAdminServiceClient.prototype.deleteDiscountRuleById = function(token, id) {
  this.send_deleteDiscountRuleById(token, id);
  this.recv_deleteDiscountRuleById();
};

MerchantAdminServiceClient.prototype.send_deleteDiscountRuleById = function(token, id) {
  this.output.writeMessageBegin('deleteDiscountRuleById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantAdminService_deleteDiscountRuleById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantAdminServiceClient.prototype.recv_deleteDiscountRuleById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantAdminService_deleteDiscountRuleById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
