//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AuthService_requestClientRegistration_args = function(args) {
  this.login = null;
  this.password = null;
  this.confirmation = null;
  this.communication = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.confirmation !== undefined) {
      this.confirmation = args.confirmation;
    }
    if (args.communication !== undefined) {
      this.communication = args.communication;
    }
  }
};
AuthService_requestClientRegistration_args.prototype = {};
AuthService_requestClientRegistration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.confirmation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestClientRegistration_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestClientRegistration_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.confirmation !== null && this.confirmation !== undefined) {
    output.writeFieldBegin('confirmation', Thrift.Type.STRING, 3);
    output.writeString(this.confirmation);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 4);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_requestClientRegistration_result = function(args) {
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_requestClientRegistration_result.prototype = {};
AuthService_requestClientRegistration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestClientRegistration_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestClientRegistration_result');
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishClientRegistration_args = function(args) {
  this.login = null;
  this.verifyCode = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.verifyCode !== undefined) {
      this.verifyCode = args.verifyCode;
    }
  }
};
AuthService_finishClientRegistration_args.prototype = {};
AuthService_finishClientRegistration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishClientRegistration_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishClientRegistration_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.verifyCode !== null && this.verifyCode !== undefined) {
    output.writeFieldBegin('verifyCode', Thrift.Type.STRING, 2);
    output.writeString(this.verifyCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishClientRegistration_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_finishClientRegistration_result.prototype = {};
AuthService_finishClientRegistration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishClientRegistration_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishClientRegistration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_authenticate_args = function(args) {
  this.login = null;
  this.password = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AuthService_authenticate_args.prototype = {};
AuthService_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_authenticate_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_authenticate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_authenticate_result.prototype = {};
AuthService_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_authenticate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_refreshAuthSession_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AuthService_refreshAuthSession_args.prototype = {};
AuthService_refreshAuthSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_refreshAuthSession_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_refreshAuthSession_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_refreshAuthSession_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_refreshAuthSession_result.prototype = {};
AuthService_refreshAuthSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_refreshAuthSession_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_refreshAuthSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_changePassword_args = function(args) {
  this.token = null;
  this.oldPassword = null;
  this.password = null;
  this.confirmation = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.oldPassword !== undefined) {
      this.oldPassword = args.oldPassword;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.confirmation !== undefined) {
      this.confirmation = args.confirmation;
    }
  }
};
AuthService_changePassword_args.prototype = {};
AuthService_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.confirmation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_changePassword_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.oldPassword !== null && this.oldPassword !== undefined) {
    output.writeFieldBegin('oldPassword', Thrift.Type.STRING, 2);
    output.writeString(this.oldPassword);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.confirmation !== null && this.confirmation !== undefined) {
    output.writeFieldBegin('confirmation', Thrift.Type.STRING, 4);
    output.writeString(this.confirmation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_changePassword_result = function(args) {
  this.sessionError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_changePassword_result.prototype = {};
AuthService_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_changePassword_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 2);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_requestResetPassword_args = function(args) {
  this.login = null;
  this.communication = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.communication !== undefined) {
      this.communication = args.communication;
    }
  }
};
AuthService_requestResetPassword_args.prototype = {};
AuthService_requestResetPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestResetPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestResetPassword_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 2);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_requestResetPassword_result = function(args) {
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_requestResetPassword_result.prototype = {};
AuthService_requestResetPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestResetPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestResetPassword_result');
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishResetPassword_args = function(args) {
  this.login = null;
  this.confirmationCode = null;
  this.password = null;
  this.confirmation = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.confirmationCode !== undefined) {
      this.confirmationCode = args.confirmationCode;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.confirmation !== undefined) {
      this.confirmation = args.confirmation;
    }
  }
};
AuthService_finishResetPassword_args.prototype = {};
AuthService_finishResetPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.confirmationCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.confirmation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishResetPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishResetPassword_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.confirmationCode !== null && this.confirmationCode !== undefined) {
    output.writeFieldBegin('confirmationCode', Thrift.Type.STRING, 2);
    output.writeString(this.confirmationCode);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.confirmation !== null && this.confirmation !== undefined) {
    output.writeFieldBegin('confirmation', Thrift.Type.STRING, 4);
    output.writeString(this.confirmation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishResetPassword_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_finishResetPassword_result.prototype = {};
AuthService_finishResetPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishResetPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishResetPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_logout_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AuthService_logout_args.prototype = {};
AuthService_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_logout_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_logout_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_logout_result = function(args) {
  this.sessionError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_logout_result.prototype = {};
AuthService_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_logout_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_logout_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_requestConfirmationCodeForRegistration_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AuthService_requestConfirmationCodeForRegistration_args.prototype = {};
AuthService_requestConfirmationCodeForRegistration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestConfirmationCodeForRegistration_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestConfirmationCodeForRegistration_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_requestConfirmationCodeForRegistration_result = function(args) {
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_requestConfirmationCodeForRegistration_result.prototype = {};
AuthService_requestConfirmationCodeForRegistration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_requestConfirmationCodeForRegistration_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_requestConfirmationCodeForRegistration_result');
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishClientRegistrationEx_args = function(args) {
  this.login = null;
  this.verifyCode = null;
  this.clientInfo = null;
  this.additionalCommunication = null;
  this.cardProgramId = null;
  this.cardNumber = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.verifyCode !== undefined) {
      this.verifyCode = args.verifyCode;
    }
    if (args.clientInfo !== undefined) {
      this.clientInfo = args.clientInfo;
    }
    if (args.additionalCommunication !== undefined) {
      this.additionalCommunication = args.additionalCommunication;
    }
    if (args.cardProgramId !== undefined) {
      this.cardProgramId = args.cardProgramId;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
  }
};
AuthService_finishClientRegistrationEx_args.prototype = {};
AuthService_finishClientRegistrationEx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientInfo = new ClientInfo();
        this.clientInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.additionalCommunication = new Communication();
        this.additionalCommunication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cardProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishClientRegistrationEx_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishClientRegistrationEx_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.verifyCode !== null && this.verifyCode !== undefined) {
    output.writeFieldBegin('verifyCode', Thrift.Type.STRING, 2);
    output.writeString(this.verifyCode);
    output.writeFieldEnd();
  }
  if (this.clientInfo !== null && this.clientInfo !== undefined) {
    output.writeFieldBegin('clientInfo', Thrift.Type.STRUCT, 3);
    this.clientInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.additionalCommunication !== null && this.additionalCommunication !== undefined) {
    output.writeFieldBegin('additionalCommunication', Thrift.Type.STRUCT, 4);
    this.additionalCommunication.write(output);
    output.writeFieldEnd();
  }
  if (this.cardProgramId !== null && this.cardProgramId !== undefined) {
    output.writeFieldBegin('cardProgramId', Thrift.Type.STRING, 5);
    output.writeString(this.cardProgramId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 6);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthService_finishClientRegistrationEx_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
AuthService_finishClientRegistrationEx_result.prototype = {};
AuthService_finishClientRegistrationEx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_finishClientRegistrationEx_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_finishClientRegistrationEx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AuthServiceClient.prototype = {};
AuthServiceClient.prototype.requestClientRegistration = function(login, password, confirmation, communication) {
  this.send_requestClientRegistration(login, password, confirmation, communication);
  this.recv_requestClientRegistration();
};

AuthServiceClient.prototype.send_requestClientRegistration = function(login, password, confirmation, communication) {
  this.output.writeMessageBegin('requestClientRegistration', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_requestClientRegistration_args();
  args.login = login;
  args.password = password;
  args.confirmation = confirmation;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_requestClientRegistration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_requestClientRegistration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
AuthServiceClient.prototype.finishClientRegistration = function(login, verifyCode) {
  this.send_finishClientRegistration(login, verifyCode);
  return this.recv_finishClientRegistration();
};

AuthServiceClient.prototype.send_finishClientRegistration = function(login, verifyCode) {
  this.output.writeMessageBegin('finishClientRegistration', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_finishClientRegistration_args();
  args.login = login;
  args.verifyCode = verifyCode;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_finishClientRegistration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_finishClientRegistration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'finishClientRegistration failed: unknown result';
};
AuthServiceClient.prototype.authenticate = function(login, password) {
  this.send_authenticate(login, password);
  return this.recv_authenticate();
};

AuthServiceClient.prototype.send_authenticate = function(login, password) {
  this.output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_authenticate_args();
  args.login = login;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_authenticate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_authenticate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticate failed: unknown result';
};
AuthServiceClient.prototype.refreshAuthSession = function(token) {
  this.send_refreshAuthSession(token);
  return this.recv_refreshAuthSession();
};

AuthServiceClient.prototype.send_refreshAuthSession = function(token) {
  this.output.writeMessageBegin('refreshAuthSession', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_refreshAuthSession_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_refreshAuthSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_refreshAuthSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'refreshAuthSession failed: unknown result';
};
AuthServiceClient.prototype.changePassword = function(token, oldPassword, password, confirmation) {
  this.send_changePassword(token, oldPassword, password, confirmation);
  this.recv_changePassword();
};

AuthServiceClient.prototype.send_changePassword = function(token, oldPassword, password, confirmation) {
  this.output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_changePassword_args();
  args.token = token;
  args.oldPassword = oldPassword;
  args.password = password;
  args.confirmation = confirmation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_changePassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_changePassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
AuthServiceClient.prototype.requestResetPassword = function(login, communication) {
  this.send_requestResetPassword(login, communication);
  this.recv_requestResetPassword();
};

AuthServiceClient.prototype.send_requestResetPassword = function(login, communication) {
  this.output.writeMessageBegin('requestResetPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_requestResetPassword_args();
  args.login = login;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_requestResetPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_requestResetPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
AuthServiceClient.prototype.finishResetPassword = function(login, confirmationCode, password, confirmation) {
  this.send_finishResetPassword(login, confirmationCode, password, confirmation);
  return this.recv_finishResetPassword();
};

AuthServiceClient.prototype.send_finishResetPassword = function(login, confirmationCode, password, confirmation) {
  this.output.writeMessageBegin('finishResetPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_finishResetPassword_args();
  args.login = login;
  args.confirmationCode = confirmationCode;
  args.password = password;
  args.confirmation = confirmation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_finishResetPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_finishResetPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'finishResetPassword failed: unknown result';
};
AuthServiceClient.prototype.logout = function(token) {
  this.send_logout(token);
  this.recv_logout();
};

AuthServiceClient.prototype.send_logout = function(token) {
  this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_logout_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
AuthServiceClient.prototype.requestConfirmationCodeForRegistration = function(login) {
  this.send_requestConfirmationCodeForRegistration(login);
  this.recv_requestConfirmationCodeForRegistration();
};

AuthServiceClient.prototype.send_requestConfirmationCodeForRegistration = function(login) {
  this.output.writeMessageBegin('requestConfirmationCodeForRegistration', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_requestConfirmationCodeForRegistration_args();
  args.login = login;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_requestConfirmationCodeForRegistration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_requestConfirmationCodeForRegistration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
AuthServiceClient.prototype.finishClientRegistrationEx = function(login, verifyCode, clientInfo, additionalCommunication, cardProgramId, cardNumber) {
  this.send_finishClientRegistrationEx(login, verifyCode, clientInfo, additionalCommunication, cardProgramId, cardNumber);
  return this.recv_finishClientRegistrationEx();
};

AuthServiceClient.prototype.send_finishClientRegistrationEx = function(login, verifyCode, clientInfo, additionalCommunication, cardProgramId, cardNumber) {
  this.output.writeMessageBegin('finishClientRegistrationEx', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthService_finishClientRegistrationEx_args();
  args.login = login;
  args.verifyCode = verifyCode;
  args.clientInfo = clientInfo;
  args.additionalCommunication = additionalCommunication;
  args.cardProgramId = cardProgramId;
  args.cardNumber = cardNumber;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AuthServiceClient.prototype.recv_finishClientRegistrationEx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthService_finishClientRegistrationEx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'finishClientRegistrationEx failed: unknown result';
};
