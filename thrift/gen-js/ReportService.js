//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ReportService_getAccruedCardOrders_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ReportService_getAccruedCardOrders_args.prototype = {};
ReportService_getAccruedCardOrders_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAccruedCardOrders_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAccruedCardOrders_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAccruedCardOrders_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ReportService_getAccruedCardOrders_result.prototype = {};
ReportService_getAccruedCardOrders_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size622 = 0;
        var _rtmp3626;
        this.success = [];
        var _etype625 = 0;
        _rtmp3626 = input.readListBegin();
        _etype625 = _rtmp3626.etype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var elem628 = null;
          elem628 = new CardOrder();
          elem628.read(input);
          this.success.push(elem628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAccruedCardOrders_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAccruedCardOrders_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter629 in this.success)
    {
      if (this.success.hasOwnProperty(iter629))
      {
        iter629 = this.success[iter629];
        iter629.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getCountAccruedCardOrders_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ReportService_getCountAccruedCardOrders_args.prototype = {};
ReportService_getCountAccruedCardOrders_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getCountAccruedCardOrders_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getCountAccruedCardOrders_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getCountAccruedCardOrders_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ReportService_getCountAccruedCardOrders_result.prototype = {};
ReportService_getCountAccruedCardOrders_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getCountAccruedCardOrders_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getCountAccruedCardOrders_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getDebitPaymentsInfo_args = function(args) {
  this.token = null;
  this.type = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
ReportService_getDebitPaymentsInfo_args.prototype = {};
ReportService_getDebitPaymentsInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getDebitPaymentsInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getDebitPaymentsInfo_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getDebitPaymentsInfo_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
ReportService_getDebitPaymentsInfo_result.prototype = {};
ReportService_getDebitPaymentsInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size630 = 0;
        var _rtmp3634;
        this.success = [];
        var _etype633 = 0;
        _rtmp3634 = input.readListBegin();
        _etype633 = _rtmp3634.etype;
        _size630 = _rtmp3634.size;
        for (var _i635 = 0; _i635 < _size630; ++_i635)
        {
          var elem636 = null;
          elem636 = input.readString().value;
          this.success.push(elem636);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getDebitPaymentsInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getDebitPaymentsInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter637 in this.success)
    {
      if (this.success.hasOwnProperty(iter637))
      {
        iter637 = this.success[iter637];
        output.writeString(iter637);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ReportServiceClient.prototype = {};
ReportServiceClient.prototype.getAccruedCardOrders = function(token, filter) {
  this.send_getAccruedCardOrders(token, filter);
  return this.recv_getAccruedCardOrders();
};

ReportServiceClient.prototype.send_getAccruedCardOrders = function(token, filter) {
  this.output.writeMessageBegin('getAccruedCardOrders', Thrift.MessageType.CALL, this.seqid);
  var args = new ReportService_getAccruedCardOrders_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ReportServiceClient.prototype.recv_getAccruedCardOrders = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getAccruedCardOrders_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAccruedCardOrders failed: unknown result';
};
ReportServiceClient.prototype.getCountAccruedCardOrders = function(token, filter) {
  this.send_getCountAccruedCardOrders(token, filter);
  return this.recv_getCountAccruedCardOrders();
};

ReportServiceClient.prototype.send_getCountAccruedCardOrders = function(token, filter) {
  this.output.writeMessageBegin('getCountAccruedCardOrders', Thrift.MessageType.CALL, this.seqid);
  var args = new ReportService_getCountAccruedCardOrders_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ReportServiceClient.prototype.recv_getCountAccruedCardOrders = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getCountAccruedCardOrders_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAccruedCardOrders failed: unknown result';
};
ReportServiceClient.prototype.getDebitPaymentsInfo = function(token, type, filter) {
  this.send_getDebitPaymentsInfo(token, type, filter);
  return this.recv_getDebitPaymentsInfo();
};

ReportServiceClient.prototype.send_getDebitPaymentsInfo = function(token, type, filter) {
  this.output.writeMessageBegin('getDebitPaymentsInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new ReportService_getDebitPaymentsInfo_args();
  args.token = token;
  args.type = type;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

ReportServiceClient.prototype.recv_getDebitPaymentsInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getDebitPaymentsInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDebitPaymentsInfo failed: unknown result';
};
