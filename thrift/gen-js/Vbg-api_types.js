//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Gender = {
'UNDEFINED' : 0,
'MALE' : 1,
'FEMALE' : 2
};
Role = {
'ADMIN' : 0,
'CONTENT' : 1,
'SELLER' : 2,
'BOOKER' : 3,
'BOOKER_ASSISTANT' : 4
};
UserType = {
'CLIENT' : 0,
'MERCHANT_USER' : 1,
'INTERNAL' : 2,
'ETL_SERVER' : 3
};
TagObject = {
'MERCHANT' : 0,
'ACTION' : 1,
'CERTIFICATE' : 2
};
WishType = {
'ACTION' : 0,
'CERTIFICATE' : 1
};
CommunicationType = {
'EMAIL' : 0,
'PHOHE' : 1
};
CardOrderStatus = {
'CREATED' : 0,
'PROCESSED' : 1,
'DELAYED' : 2,
'CANCELED' : 3
};
CardOrderType = {
'CARD_TURNOVER' : 0,
'GREETING' : 1,
'SOCIAL_NETWORKS' : 2,
'DEPOSIT' : 3
};
PaymentStatus = {
'CREATE' : 0,
'REQUEST_CODE' : 1,
'CANCELLED' : 2,
'PAYED' : 3
};
CertificateUseType = {
'THROUGH_MERCHANT' : 0,
'THROUGH_CABINET' : 1
};
CertificateQuantitativeType = {
'INFINITE' : 0,
'LIMITED' : 1
};
CertificatePaymentType = {
'ON_BUY' : 0,
'ON_USE' : 1
};
CertificateFunction = {
'DISCOUNT' : 0,
'USUAL' : 1
};
FrontCodeType = {
'NUMBERS' : 0,
'QR' : 1,
'EAN13' : 2,
'EAN128' : 3,
'CODABAR' : 4,
'EAN13_EXTENDED' : 5
};
ClientCertificateCodeType = {
'NONE' : 0,
'PDF' : 1
};
SupplierPriority = {
'LOW' : 0,
'NORMAL' : 1,
'HIGH' : 2
};
FilterCondition = {
'EQUAL' : 0,
'NOT_EQUAL' : 1,
'CONTAIN' : 2,
'NOT_CONTAIN' : 3,
'LESS' : 4,
'LESS_OR_EQUAL' : 5,
'MORE' : 6,
'MORE_OR_EQUAL' : 7
};
DiscountRuleType = {
'EQUAL' : 0,
'MULTIPLE' : 1,
'OTHER' : 2,
'INCALCULABLE' : 3
};
NotCalculatedDiscountRuleType = {
'GIFT' : 0,
'FREE_SHIPPING' : 1,
'REFUND' : 2,
'SALE_PERCENT' : 3,
'SALE_AMOUNT' : 4,
'BEST_PRICE' : 5
};
ETLFileFormat = {
'XML' : 0
};
ReportType = {
'CSV' : 0
};
ServerException = function(args) {
  this.errorMessageKey = null;
  this.errorMessage = null;
  if (args) {
    if (args.errorMessageKey !== undefined) {
      this.errorMessageKey = args.errorMessageKey;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
Thrift.inherits(ServerException, Thrift.TException);
ServerException.prototype.name = 'ServerException';
ServerException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessageKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerException.prototype.write = function(output) {
  output.writeStructBegin('ServerException');
  if (this.errorMessageKey !== null && this.errorMessageKey !== undefined) {
    output.writeFieldBegin('errorMessageKey', Thrift.Type.STRING, 1);
    output.writeString(this.errorMessageKey);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PreconditionException = function(args) {
  this.errorMessageKey = null;
  this.errorMessage = null;
  this.i18nCode = null;
  if (args) {
    if (args.errorMessageKey !== undefined) {
      this.errorMessageKey = args.errorMessageKey;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
    if (args.i18nCode !== undefined) {
      this.i18nCode = args.i18nCode;
    }
  }
};
Thrift.inherits(PreconditionException, Thrift.TException);
PreconditionException.prototype.name = 'PreconditionException';
PreconditionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessageKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.i18nCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PreconditionException.prototype.write = function(output) {
  output.writeStructBegin('PreconditionException');
  if (this.errorMessageKey !== null && this.errorMessageKey !== undefined) {
    output.writeFieldBegin('errorMessageKey', Thrift.Type.STRING, 1);
    output.writeString(this.errorMessageKey);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.i18nCode !== null && this.i18nCode !== undefined) {
    output.writeFieldBegin('i18nCode', Thrift.Type.STRING, 3);
    output.writeString(this.i18nCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WrongSessionException = function(args) {
  this.errorMessageKey = null;
  this.errorMessage = null;
  if (args) {
    if (args.errorMessageKey !== undefined) {
      this.errorMessageKey = args.errorMessageKey;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
Thrift.inherits(WrongSessionException, Thrift.TException);
WrongSessionException.prototype.name = 'WrongSessionException';
WrongSessionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessageKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WrongSessionException.prototype.write = function(output) {
  output.writeStructBegin('WrongSessionException');
  if (this.errorMessageKey !== null && this.errorMessageKey !== undefined) {
    output.writeFieldBegin('errorMessageKey', Thrift.Type.STRING, 1);
    output.writeString(this.errorMessageKey);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccessDenyException = function(args) {
  this.errorMessageKey = null;
  this.errorMessage = null;
  if (args) {
    if (args.errorMessageKey !== undefined) {
      this.errorMessageKey = args.errorMessageKey;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
Thrift.inherits(AccessDenyException, Thrift.TException);
AccessDenyException.prototype.name = 'AccessDenyException';
AccessDenyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessageKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessDenyException.prototype.write = function(output) {
  output.writeStructBegin('AccessDenyException');
  if (this.errorMessageKey !== null && this.errorMessageKey !== undefined) {
    output.writeFieldBegin('errorMessageKey', Thrift.Type.STRING, 1);
    output.writeString(this.errorMessageKey);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Picture = function(args) {
  this.img = null;
  if (args) {
    if (args.img !== undefined) {
      this.img = args.img;
    }
  }
};
Picture.prototype = {};
Picture.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.img = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Picture.prototype.write = function(output) {
  output.writeStructBegin('Picture');
  if (this.img !== null && this.img !== undefined) {
    output.writeFieldBegin('img', Thrift.Type.STRING, 1);
    output.writeString(this.img);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientInfo = function(args) {
  this.id = null;
  this.login = null;
  this.firstName = null;
  this.lastName = null;
  this.middleName = null;
  this.birthDay = null;
  this.registrationDate = null;
  this.attrs = null;
  this.gender = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.firstName !== undefined) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined) {
      this.lastName = args.lastName;
    }
    if (args.middleName !== undefined) {
      this.middleName = args.middleName;
    }
    if (args.birthDay !== undefined) {
      this.birthDay = args.birthDay;
    }
    if (args.registrationDate !== undefined) {
      this.registrationDate = args.registrationDate;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.gender !== undefined) {
      this.gender = args.gender;
    }
  }
};
ClientInfo.prototype = {};
ClientInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.middleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.birthDay = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.registrationDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.attrs = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.attrs[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.gender = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInfo.prototype.write = function(output) {
  output.writeStructBegin('ClientInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 3);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 4);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleName !== null && this.middleName !== undefined) {
    output.writeFieldBegin('middleName', Thrift.Type.STRING, 5);
    output.writeString(this.middleName);
    output.writeFieldEnd();
  }
  if (this.birthDay !== null && this.birthDay !== undefined) {
    output.writeFieldBegin('birthDay', Thrift.Type.STRING, 6);
    output.writeString(this.birthDay);
    output.writeFieldEnd();
  }
  if (this.registrationDate !== null && this.registrationDate !== undefined) {
    output.writeFieldBegin('registrationDate', Thrift.Type.STRING, 7);
    output.writeString(this.registrationDate);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter8 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter8))
      {
        var viter9 = this.attrs[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I32, 9);
    output.writeI32(this.gender);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Wish = function(args) {
  this.id = null;
  this.wishId = null;
  this.wishType = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.wishId !== undefined) {
      this.wishId = args.wishId;
    }
    if (args.wishType !== undefined) {
      this.wishType = args.wishType;
    }
  }
};
Wish.prototype = {};
Wish.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.wishId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.wishType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Wish.prototype.write = function(output) {
  output.writeStructBegin('Wish');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.wishId !== null && this.wishId !== undefined) {
    output.writeFieldBegin('wishId', Thrift.Type.STRING, 2);
    output.writeString(this.wishId);
    output.writeFieldEnd();
  }
  if (this.wishType !== null && this.wishType !== undefined) {
    output.writeFieldBegin('wishType', Thrift.Type.I32, 3);
    output.writeI32(this.wishType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = function(args) {
  this.clientInfo = null;
  this.type = null;
  this.merchantId = null;
  this.supplierId = null;
  this.superUser = null;
  this.roles = null;
  this.deleteDate = null;
  if (args) {
    if (args.clientInfo !== undefined) {
      this.clientInfo = args.clientInfo;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.supplierId !== undefined) {
      this.supplierId = args.supplierId;
    }
    if (args.superUser !== undefined) {
      this.superUser = args.superUser;
    }
    if (args.roles !== undefined) {
      this.roles = args.roles;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientInfo = new ClientInfo();
        this.clientInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.supplierId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.superUser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size10 = 0;
        var _rtmp314;
        this.roles = [];
        var _etype13 = 0;
        _rtmp314 = input.readSetBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readI32().value;
          this.roles.push(elem16);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.clientInfo !== null && this.clientInfo !== undefined) {
    output.writeFieldBegin('clientInfo', Thrift.Type.STRUCT, 1);
    this.clientInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.supplierId !== null && this.supplierId !== undefined) {
    output.writeFieldBegin('supplierId', Thrift.Type.STRING, 4);
    output.writeString(this.supplierId);
    output.writeFieldEnd();
  }
  if (this.superUser !== null && this.superUser !== undefined) {
    output.writeFieldBegin('superUser', Thrift.Type.BOOL, 5);
    output.writeBool(this.superUser);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.I32, this.roles.length);
    for (var iter17 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter17))
      {
        iter17 = this.roles[iter17];
        output.writeI32(iter17);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 7);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Address = function(args) {
  this.id = null;
  this.zipCode = null;
  this.country = null;
  this.state = null;
  this.city = null;
  this.street = null;
  this.house = null;
  this.apartment = null;
  this.main = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.zipCode !== undefined) {
      this.zipCode = args.zipCode;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.street !== undefined) {
      this.street = args.street;
    }
    if (args.house !== undefined) {
      this.house = args.house;
    }
    if (args.apartment !== undefined) {
      this.apartment = args.apartment;
    }
    if (args.main !== undefined) {
      this.main = args.main;
    }
  }
};
Address.prototype = {};
Address.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.zipCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.street = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.house = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.apartment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.main = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Address.prototype.write = function(output) {
  output.writeStructBegin('Address');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.zipCode !== null && this.zipCode !== undefined) {
    output.writeFieldBegin('zipCode', Thrift.Type.STRING, 2);
    output.writeString(this.zipCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 4);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.STRING, 6);
    output.writeString(this.street);
    output.writeFieldEnd();
  }
  if (this.house !== null && this.house !== undefined) {
    output.writeFieldBegin('house', Thrift.Type.STRING, 7);
    output.writeString(this.house);
    output.writeFieldEnd();
  }
  if (this.apartment !== null && this.apartment !== undefined) {
    output.writeFieldBegin('apartment', Thrift.Type.STRING, 8);
    output.writeString(this.apartment);
    output.writeFieldEnd();
  }
  if (this.main !== null && this.main !== undefined) {
    output.writeFieldBegin('main', Thrift.Type.BOOL, 9);
    output.writeBool(this.main);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Communication = function(args) {
  this.id = null;
  this.type = null;
  this.value = null;
  this.confirmed = null;
  this.main = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.confirmed !== undefined) {
      this.confirmed = args.confirmed;
    }
    if (args.main !== undefined) {
      this.main = args.main;
    }
  }
};
Communication.prototype = {};
Communication.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.confirmed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.main = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Communication.prototype.write = function(output) {
  output.writeStructBegin('Communication');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.confirmed !== null && this.confirmed !== undefined) {
    output.writeFieldBegin('confirmed', Thrift.Type.BOOL, 4);
    output.writeBool(this.confirmed);
    output.writeFieldEnd();
  }
  if (this.main !== null && this.main !== undefined) {
    output.writeFieldBegin('main', Thrift.Type.BOOL, 5);
    output.writeBool(this.main);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthSession = function(args) {
  this.token = null;
  this.expireDate = null;
  this.createDate = null;
  this.updateDate = null;
  this.clientInfo = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.expireDate !== undefined) {
      this.expireDate = args.expireDate;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.updateDate !== undefined) {
      this.updateDate = args.updateDate;
    }
    if (args.clientInfo !== undefined) {
      this.clientInfo = args.clientInfo;
    }
  }
};
AuthSession.prototype = {};
AuthSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expireDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.updateDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientInfo = new ClientInfo();
        this.clientInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSession.prototype.write = function(output) {
  output.writeStructBegin('AuthSession');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.expireDate !== null && this.expireDate !== undefined) {
    output.writeFieldBegin('expireDate', Thrift.Type.STRING, 2);
    output.writeString(this.expireDate);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 3);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.updateDate !== null && this.updateDate !== undefined) {
    output.writeFieldBegin('updateDate', Thrift.Type.STRING, 4);
    output.writeString(this.updateDate);
    output.writeFieldEnd();
  }
  if (this.clientInfo !== null && this.clientInfo !== undefined) {
    output.writeFieldBegin('clientInfo', Thrift.Type.STRUCT, 5);
    this.clientInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusProgram = function(args) {
  this.id = null;
  this.name = null;
  this.createDate = null;
  this.activeToDate = null;
  this.deleteDate = null;
  this.attrs = null;
  this.bonusProgramAlias = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.activeToDate !== undefined) {
      this.activeToDate = args.activeToDate;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.bonusProgramAlias !== undefined) {
      this.bonusProgramAlias = args.bonusProgramAlias;
    }
  }
};
BonusProgram.prototype = {};
BonusProgram.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.activeToDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.attrs = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          if (_i23 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key24 = null;
          var val25 = null;
          key24 = input.readString().value;
          val25 = input.readString().value;
          this.attrs[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramAlias = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusProgram.prototype.write = function(output) {
  output.writeStructBegin('BonusProgram');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 3);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.activeToDate !== null && this.activeToDate !== undefined) {
    output.writeFieldBegin('activeToDate', Thrift.Type.STRING, 4);
    output.writeString(this.activeToDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 5);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter26 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter26))
      {
        var viter27 = this.attrs[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bonusProgramAlias !== null && this.bonusProgramAlias !== undefined) {
    output.writeFieldBegin('bonusProgramAlias', Thrift.Type.STRING, 7);
    output.writeString(this.bonusProgramAlias);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExtendedBonusProgram = function(args) {
  this.bonusProgram = null;
  this.hideMask = null;
  this.eqMask = null;
  if (args) {
    if (args.bonusProgram !== undefined) {
      this.bonusProgram = args.bonusProgram;
    }
    if (args.hideMask !== undefined) {
      this.hideMask = args.hideMask;
    }
    if (args.eqMask !== undefined) {
      this.eqMask = args.eqMask;
    }
  }
};
ExtendedBonusProgram.prototype = {};
ExtendedBonusProgram.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bonusProgram = new BonusProgram();
        this.bonusProgram.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hideMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.eqMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedBonusProgram.prototype.write = function(output) {
  output.writeStructBegin('ExtendedBonusProgram');
  if (this.bonusProgram !== null && this.bonusProgram !== undefined) {
    output.writeFieldBegin('bonusProgram', Thrift.Type.STRUCT, 1);
    this.bonusProgram.write(output);
    output.writeFieldEnd();
  }
  if (this.hideMask !== null && this.hideMask !== undefined) {
    output.writeFieldBegin('hideMask', Thrift.Type.STRING, 2);
    output.writeString(this.hideMask);
    output.writeFieldEnd();
  }
  if (this.eqMask !== null && this.eqMask !== undefined) {
    output.writeFieldBegin('eqMask', Thrift.Type.STRING, 3);
    output.writeString(this.eqMask);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Account = function(args) {
  this.id = null;
  this.programId = null;
  this.amount = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
  }
};
Account.prototype = {};
Account.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Account.prototype.write = function(output) {
  output.writeStructBegin('Account');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 2);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 3);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Card = function(args) {
  this.id = null;
  this.programId = null;
  this.number = null;
  this.registrateDate = null;
  this.deleteDate = null;
  this.attrs = null;
  this.description = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.number !== undefined) {
      this.number = args.number;
    }
    if (args.registrateDate !== undefined) {
      this.registrateDate = args.registrateDate;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
Card.prototype = {};
Card.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registrateDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size28 = 0;
        var _rtmp332;
        this.attrs = {};
        var _ktype29 = 0;
        var _vtype30 = 0;
        _rtmp332 = input.readMapBegin();
        _ktype29 = _rtmp332.ktype;
        _vtype30 = _rtmp332.vtype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          if (_i33 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key34 = null;
          var val35 = null;
          key34 = input.readString().value;
          val35 = input.readString().value;
          this.attrs[key34] = val35;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Card.prototype.write = function(output) {
  output.writeStructBegin('Card');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 2);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 3);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  if (this.registrateDate !== null && this.registrateDate !== undefined) {
    output.writeFieldBegin('registrateDate', Thrift.Type.STRING, 4);
    output.writeString(this.registrateDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 5);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter36 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter36))
      {
        var viter37 = this.attrs[kiter36];
        output.writeString(kiter36);
        output.writeString(viter37);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 7);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardOrder = function(args) {
  this.id = null;
  this.cardId = null;
  this.cardHash = null;
  this.amount = null;
  this.type = null;
  this.orderDescription = null;
  this.createDate = null;
  this.processDate = null;
  this.status = null;
  this.externalId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.cardId !== undefined) {
      this.cardId = args.cardId;
    }
    if (args.cardHash !== undefined) {
      this.cardHash = args.cardHash;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.orderDescription !== undefined) {
      this.orderDescription = args.orderDescription;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.processDate !== undefined) {
      this.processDate = args.processDate;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.externalId !== undefined) {
      this.externalId = args.externalId;
    }
  }
};
CardOrder.prototype = {};
CardOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.orderDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.processDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.externalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardOrder.prototype.write = function(output) {
  output.writeStructBegin('CardOrder');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 2);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.cardHash !== null && this.cardHash !== undefined) {
    output.writeFieldBegin('cardHash', Thrift.Type.STRING, 3);
    output.writeString(this.cardHash);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 4);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.orderDescription !== null && this.orderDescription !== undefined) {
    output.writeFieldBegin('orderDescription', Thrift.Type.STRING, 6);
    output.writeString(this.orderDescription);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 7);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.processDate !== null && this.processDate !== undefined) {
    output.writeFieldBegin('processDate', Thrift.Type.STRING, 8);
    output.writeString(this.processDate);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.externalId !== null && this.externalId !== undefined) {
    output.writeFieldBegin('externalId', Thrift.Type.STRING, 10);
    output.writeString(this.externalId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientOrder = function(args) {
  this.id = null;
  this.clientId = null;
  this.amount = null;
  this.type = null;
  this.orderDescription = null;
  this.createDate = null;
  this.processDate = null;
  this.status = null;
  this.externalId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.orderDescription !== undefined) {
      this.orderDescription = args.orderDescription;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.processDate !== undefined) {
      this.processDate = args.processDate;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.externalId !== undefined) {
      this.externalId = args.externalId;
    }
  }
};
ClientOrder.prototype = {};
ClientOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orderDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.processDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.externalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientOrder.prototype.write = function(output) {
  output.writeStructBegin('ClientOrder');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 2);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 3);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.orderDescription !== null && this.orderDescription !== undefined) {
    output.writeFieldBegin('orderDescription', Thrift.Type.STRING, 5);
    output.writeString(this.orderDescription);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 6);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.processDate !== null && this.processDate !== undefined) {
    output.writeFieldBegin('processDate', Thrift.Type.STRING, 7);
    output.writeString(this.processDate);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.externalId !== null && this.externalId !== undefined) {
    output.writeFieldBegin('externalId', Thrift.Type.STRING, 9);
    output.writeString(this.externalId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Adjunction = function(args) {
  this.id = null;
  this.supplierId = null;
  this.adjunctionDescription = null;
  this.fileName = null;
  this.bonusProgramId = null;
  this.orders = null;
  this.clientOrders = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.supplierId !== undefined) {
      this.supplierId = args.supplierId;
    }
    if (args.adjunctionDescription !== undefined) {
      this.adjunctionDescription = args.adjunctionDescription;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.bonusProgramId !== undefined) {
      this.bonusProgramId = args.bonusProgramId;
    }
    if (args.orders !== undefined) {
      this.orders = args.orders;
    }
    if (args.clientOrders !== undefined) {
      this.clientOrders = args.clientOrders;
    }
  }
};
Adjunction.prototype = {};
Adjunction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.supplierId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.adjunctionDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.orders = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new CardOrder();
          elem44.read(input);
          this.orders.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.clientOrders = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new ClientOrder();
          elem51.read(input);
          this.clientOrders.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Adjunction.prototype.write = function(output) {
  output.writeStructBegin('Adjunction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.supplierId !== null && this.supplierId !== undefined) {
    output.writeFieldBegin('supplierId', Thrift.Type.STRING, 2);
    output.writeString(this.supplierId);
    output.writeFieldEnd();
  }
  if (this.adjunctionDescription !== null && this.adjunctionDescription !== undefined) {
    output.writeFieldBegin('adjunctionDescription', Thrift.Type.STRING, 3);
    output.writeString(this.adjunctionDescription);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 4);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.bonusProgramId !== null && this.bonusProgramId !== undefined) {
    output.writeFieldBegin('bonusProgramId', Thrift.Type.STRING, 5);
    output.writeString(this.bonusProgramId);
    output.writeFieldEnd();
  }
  if (this.orders !== null && this.orders !== undefined) {
    output.writeFieldBegin('orders', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.orders.length);
    for (var iter52 in this.orders)
    {
      if (this.orders.hasOwnProperty(iter52))
      {
        iter52 = this.orders[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientOrders !== null && this.clientOrders !== undefined) {
    output.writeFieldBegin('clientOrders', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.clientOrders.length);
    for (var iter53 in this.clientOrders)
    {
      if (this.clientOrders.hasOwnProperty(iter53))
      {
        iter53 = this.clientOrders[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Payment = function(args) {
  this.id = null;
  this.bonusProgramId = null;
  this.accountId = null;
  this.merchantId = null;
  this.merchantPointId = null;
  this.exchangeRateId = null;
  this.amount = null;
  this.exchangeValue = null;
  this.payedValue = null;
  this.status = null;
  this.clientCertificateId = null;
  this.createDate = null;
  this.payedDate = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.bonusProgramId !== undefined) {
      this.bonusProgramId = args.bonusProgramId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.exchangeRateId !== undefined) {
      this.exchangeRateId = args.exchangeRateId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.exchangeValue !== undefined) {
      this.exchangeValue = args.exchangeValue;
    }
    if (args.payedValue !== undefined) {
      this.payedValue = args.payedValue;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.clientCertificateId !== undefined) {
      this.clientCertificateId = args.clientCertificateId;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.payedDate !== undefined) {
      this.payedDate = args.payedDate;
    }
  }
};
Payment.prototype = {};
Payment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeRateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.exchangeValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.payedValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.clientCertificateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.payedDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Payment.prototype.write = function(output) {
  output.writeStructBegin('Payment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.bonusProgramId !== null && this.bonusProgramId !== undefined) {
    output.writeFieldBegin('bonusProgramId', Thrift.Type.STRING, 2);
    output.writeString(this.bonusProgramId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 4);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 5);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.exchangeRateId !== null && this.exchangeRateId !== undefined) {
    output.writeFieldBegin('exchangeRateId', Thrift.Type.STRING, 6);
    output.writeString(this.exchangeRateId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 7);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  if (this.exchangeValue !== null && this.exchangeValue !== undefined) {
    output.writeFieldBegin('exchangeValue', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.exchangeValue);
    output.writeFieldEnd();
  }
  if (this.payedValue !== null && this.payedValue !== undefined) {
    output.writeFieldBegin('payedValue', Thrift.Type.I64, 9);
    output.writeI64(this.payedValue);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 10);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.clientCertificateId !== null && this.clientCertificateId !== undefined) {
    output.writeFieldBegin('clientCertificateId', Thrift.Type.STRING, 11);
    output.writeString(this.clientCertificateId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 12);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.payedDate !== null && this.payedDate !== undefined) {
    output.writeFieldBegin('payedDate', Thrift.Type.STRING, 13);
    output.writeString(this.payedDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPayment = function(args) {
  this.payment = null;
  this.accountingDate = null;
  this.accountingDescription = null;
  if (args) {
    if (args.payment !== undefined) {
      this.payment = args.payment;
    }
    if (args.accountingDate !== undefined) {
      this.accountingDate = args.accountingDate;
    }
    if (args.accountingDescription !== undefined) {
      this.accountingDescription = args.accountingDescription;
    }
  }
};
MerchantPayment.prototype = {};
MerchantPayment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment = new Payment();
        this.payment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountingDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountingDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPayment.prototype.write = function(output) {
  output.writeStructBegin('MerchantPayment');
  if (this.payment !== null && this.payment !== undefined) {
    output.writeFieldBegin('payment', Thrift.Type.STRUCT, 1);
    this.payment.write(output);
    output.writeFieldEnd();
  }
  if (this.accountingDate !== null && this.accountingDate !== undefined) {
    output.writeFieldBegin('accountingDate', Thrift.Type.STRING, 2);
    output.writeString(this.accountingDate);
    output.writeFieldEnd();
  }
  if (this.accountingDescription !== null && this.accountingDescription !== undefined) {
    output.writeFieldBegin('accountingDescription', Thrift.Type.STRING, 3);
    output.writeString(this.accountingDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Merchant = function(args) {
  this.id = null;
  this.name = null;
  this.createDate = null;
  this.deleteDate = null;
  this.attrs = null;
  this.urlSite = null;
  this.communications = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.urlSite !== undefined) {
      this.urlSite = args.urlSite;
    }
    if (args.communications !== undefined) {
      this.communications = args.communications;
    }
  }
};
Merchant.prototype = {};
Merchant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.attrs = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          if (_i59 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key60 = null;
          var val61 = null;
          key60 = input.readString().value;
          val61 = input.readString().value;
          this.attrs[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.urlSite = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.communications = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Merchant.prototype.write = function(output) {
  output.writeStructBegin('Merchant');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 3);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 4);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter62 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter62))
      {
        var viter63 = this.attrs[kiter62];
        output.writeString(kiter62);
        output.writeString(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.urlSite !== null && this.urlSite !== undefined) {
    output.writeFieldBegin('urlSite', Thrift.Type.STRING, 6);
    output.writeString(this.urlSite);
    output.writeFieldEnd();
  }
  if (this.communications !== null && this.communications !== undefined) {
    output.writeFieldBegin('communications', Thrift.Type.STRING, 7);
    output.writeString(this.communications);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExtendedMerchant = function(args) {
  this.merchant = null;
  this.urlCertificateService = null;
  if (args) {
    if (args.merchant !== undefined) {
      this.merchant = args.merchant;
    }
    if (args.urlCertificateService !== undefined) {
      this.urlCertificateService = args.urlCertificateService;
    }
  }
};
ExtendedMerchant.prototype = {};
ExtendedMerchant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.merchant = new Merchant();
        this.merchant.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.urlCertificateService = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedMerchant.prototype.write = function(output) {
  output.writeStructBegin('ExtendedMerchant');
  if (this.merchant !== null && this.merchant !== undefined) {
    output.writeFieldBegin('merchant', Thrift.Type.STRUCT, 1);
    this.merchant.write(output);
    output.writeFieldEnd();
  }
  if (this.urlCertificateService !== null && this.urlCertificateService !== undefined) {
    output.writeFieldBegin('urlCertificateService', Thrift.Type.STRING, 2);
    output.writeString(this.urlCertificateService);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeoData = function(args) {
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
GeoData.prototype = {};
GeoData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.latitude = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.longitude = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeoData.prototype.write = function(output) {
  output.writeStructBegin('GeoData');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.STRING, 1);
    output.writeString(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.STRING, 2);
    output.writeString(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPoint = function(args) {
  this.id = null;
  this.merchantId = null;
  this.pointDescription = null;
  this.workingHours = null;
  this.communications = null;
  this.geoData = null;
  this.attrs = null;
  this.deleteDate = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.pointDescription !== undefined) {
      this.pointDescription = args.pointDescription;
    }
    if (args.workingHours !== undefined) {
      this.workingHours = args.workingHours;
    }
    if (args.communications !== undefined) {
      this.communications = args.communications;
    }
    if (args.geoData !== undefined) {
      this.geoData = args.geoData;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
  }
};
MerchantPoint.prototype = {};
MerchantPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pointDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.workingHours = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.communications = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.geoData = new GeoData();
        this.geoData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.attrs = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          if (_i69 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key70 = null;
          var val71 = null;
          key70 = input.readString().value;
          val71 = input.readString().value;
          this.attrs[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPoint.prototype.write = function(output) {
  output.writeStructBegin('MerchantPoint');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.pointDescription !== null && this.pointDescription !== undefined) {
    output.writeFieldBegin('pointDescription', Thrift.Type.STRING, 3);
    output.writeString(this.pointDescription);
    output.writeFieldEnd();
  }
  if (this.workingHours !== null && this.workingHours !== undefined) {
    output.writeFieldBegin('workingHours', Thrift.Type.STRING, 4);
    output.writeString(this.workingHours);
    output.writeFieldEnd();
  }
  if (this.communications !== null && this.communications !== undefined) {
    output.writeFieldBegin('communications', Thrift.Type.STRING, 5);
    output.writeString(this.communications);
    output.writeFieldEnd();
  }
  if (this.geoData !== null && this.geoData !== undefined) {
    output.writeFieldBegin('geoData', Thrift.Type.STRUCT, 6);
    this.geoData.write(output);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter72 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter72))
      {
        var viter73 = this.attrs[kiter72];
        output.writeString(kiter72);
        output.writeString(viter73);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 8);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantAction = function(args) {
  this.id = null;
  this.merchantId = null;
  this.merchantPointId = null;
  this.actionDescription = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.attrs = null;
  this.deleteDate = null;
  this.externalId = null;
  this.externalPicture = null;
  this.externalLink = null;
  this.actionName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.actionDescription !== undefined) {
      this.actionDescription = args.actionDescription;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.externalId !== undefined) {
      this.externalId = args.externalId;
    }
    if (args.externalPicture !== undefined) {
      this.externalPicture = args.externalPicture;
    }
    if (args.externalLink !== undefined) {
      this.externalLink = args.externalLink;
    }
    if (args.actionName !== undefined) {
      this.actionName = args.actionName;
    }
  }
};
MerchantAction.prototype = {};
MerchantAction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.actionDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.attrs = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          if (_i79 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key80 = null;
          var val81 = null;
          key80 = input.readString().value;
          val81 = input.readString().value;
          this.attrs[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.externalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.externalPicture = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.externalLink = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.actionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantAction.prototype.write = function(output) {
  output.writeStructBegin('MerchantAction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.actionDescription !== null && this.actionDescription !== undefined) {
    output.writeFieldBegin('actionDescription', Thrift.Type.STRING, 4);
    output.writeString(this.actionDescription);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 5);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 6);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter82 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter82))
      {
        var viter83 = this.attrs[kiter82];
        output.writeString(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 8);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.externalId !== null && this.externalId !== undefined) {
    output.writeFieldBegin('externalId', Thrift.Type.STRING, 9);
    output.writeString(this.externalId);
    output.writeFieldEnd();
  }
  if (this.externalPicture !== null && this.externalPicture !== undefined) {
    output.writeFieldBegin('externalPicture', Thrift.Type.STRING, 10);
    output.writeString(this.externalPicture);
    output.writeFieldEnd();
  }
  if (this.externalLink !== null && this.externalLink !== undefined) {
    output.writeFieldBegin('externalLink', Thrift.Type.STRING, 11);
    output.writeString(this.externalLink);
    output.writeFieldEnd();
  }
  if (this.actionName !== null && this.actionName !== undefined) {
    output.writeFieldBegin('actionName', Thrift.Type.STRING, 12);
    output.writeString(this.actionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeRate = function(args) {
  this.id = null;
  this.programId = null;
  this.merchantId = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.value = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.programId !== undefined) {
      this.programId = args.programId;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
ExchangeRate.prototype = {};
ExchangeRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.programId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeRate.prototype.write = function(output) {
  output.writeStructBegin('ExchangeRate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.programId !== null && this.programId !== undefined) {
    output.writeFieldBegin('programId', Thrift.Type.STRING, 2);
    output.writeString(this.programId);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 4);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 5);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Certificate = function(args) {
  this.id = null;
  this.externalId = null;
  this.merchantId = null;
  this.bonusProgramId = null;
  this.name = null;
  this.certificateDescription = null;
  this.cost = null;
  this.spendingCost = null;
  this.spendingCostInUnits = null;
  this.unit = null;
  this.createDate = null;
  this.deleteDate = null;
  this.startDate = null;
  this.endDate = null;
  this.funct = null;
  this.type = null;
  this.paymentType = null;
  this.quantity = null;
  this.attrs = null;
  this.urlImg = null;
  this.useType = null;
  this.requiredAttrs = null;
  this.frontCodes = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.externalId !== undefined) {
      this.externalId = args.externalId;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.bonusProgramId !== undefined) {
      this.bonusProgramId = args.bonusProgramId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.certificateDescription !== undefined) {
      this.certificateDescription = args.certificateDescription;
    }
    if (args.cost !== undefined) {
      this.cost = args.cost;
    }
    if (args.spendingCost !== undefined) {
      this.spendingCost = args.spendingCost;
    }
    if (args.spendingCostInUnits !== undefined) {
      this.spendingCostInUnits = args.spendingCostInUnits;
    }
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.startDate !== undefined) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined) {
      this.endDate = args.endDate;
    }
    if (args.funct !== undefined) {
      this.funct = args.funct;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.paymentType !== undefined) {
      this.paymentType = args.paymentType;
    }
    if (args.quantity !== undefined) {
      this.quantity = args.quantity;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
    if (args.urlImg !== undefined) {
      this.urlImg = args.urlImg;
    }
    if (args.useType !== undefined) {
      this.useType = args.useType;
    }
    if (args.requiredAttrs !== undefined) {
      this.requiredAttrs = args.requiredAttrs;
    }
    if (args.frontCodes !== undefined) {
      this.frontCodes = args.frontCodes;
    }
  }
};
Certificate.prototype = {};
Certificate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.externalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.certificateDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.cost = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.spendingCost = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.spendingCostInUnits = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.startDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.endDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.funct = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.paymentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.MAP) {
        var _size84 = 0;
        var _rtmp388;
        this.attrs = {};
        var _ktype85 = 0;
        var _vtype86 = 0;
        _rtmp388 = input.readMapBegin();
        _ktype85 = _rtmp388.ktype;
        _vtype86 = _rtmp388.vtype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          if (_i89 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key90 = null;
          var val91 = null;
          key90 = input.readString().value;
          val91 = input.readString().value;
          this.attrs[key90] = val91;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.urlImg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.useType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.requiredAttrs = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readString().value;
          this.requiredAttrs.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.SET) {
        var _size99 = 0;
        var _rtmp3103;
        this.frontCodes = [];
        var _etype102 = 0;
        _rtmp3103 = input.readSetBegin();
        _etype102 = _rtmp3103.etype;
        _size99 = _rtmp3103.size;
        for (var _i104 = 0; _i104 < _size99; ++_i104)
        {
          var elem105 = null;
          elem105 = input.readI32().value;
          this.frontCodes.push(elem105);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Certificate.prototype.write = function(output) {
  output.writeStructBegin('Certificate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.externalId !== null && this.externalId !== undefined) {
    output.writeFieldBegin('externalId', Thrift.Type.STRING, 2);
    output.writeString(this.externalId);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.bonusProgramId !== null && this.bonusProgramId !== undefined) {
    output.writeFieldBegin('bonusProgramId', Thrift.Type.STRING, 4);
    output.writeString(this.bonusProgramId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.certificateDescription !== null && this.certificateDescription !== undefined) {
    output.writeFieldBegin('certificateDescription', Thrift.Type.STRING, 6);
    output.writeString(this.certificateDescription);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.I64, 7);
    output.writeI64(this.cost);
    output.writeFieldEnd();
  }
  if (this.spendingCost !== null && this.spendingCost !== undefined) {
    output.writeFieldBegin('spendingCost', Thrift.Type.I64, 8);
    output.writeI64(this.spendingCost);
    output.writeFieldEnd();
  }
  if (this.spendingCostInUnits !== null && this.spendingCostInUnits !== undefined) {
    output.writeFieldBegin('spendingCostInUnits', Thrift.Type.I64, 9);
    output.writeI64(this.spendingCostInUnits);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 10);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 11);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 12);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.STRING, 13);
    output.writeString(this.startDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.STRING, 14);
    output.writeString(this.endDate);
    output.writeFieldEnd();
  }
  if (this.funct !== null && this.funct !== undefined) {
    output.writeFieldBegin('funct', Thrift.Type.I32, 15);
    output.writeI32(this.funct);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 16);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.paymentType !== null && this.paymentType !== undefined) {
    output.writeFieldBegin('paymentType', Thrift.Type.I32, 17);
    output.writeI32(this.paymentType);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 18);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 19);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter106 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter106))
      {
        var viter107 = this.attrs[kiter106];
        output.writeString(kiter106);
        output.writeString(viter107);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.urlImg !== null && this.urlImg !== undefined) {
    output.writeFieldBegin('urlImg', Thrift.Type.STRING, 20);
    output.writeString(this.urlImg);
    output.writeFieldEnd();
  }
  if (this.useType !== null && this.useType !== undefined) {
    output.writeFieldBegin('useType', Thrift.Type.I32, 21);
    output.writeI32(this.useType);
    output.writeFieldEnd();
  }
  if (this.requiredAttrs !== null && this.requiredAttrs !== undefined) {
    output.writeFieldBegin('requiredAttrs', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRING, this.requiredAttrs.length);
    for (var iter108 in this.requiredAttrs)
    {
      if (this.requiredAttrs.hasOwnProperty(iter108))
      {
        iter108 = this.requiredAttrs[iter108];
        output.writeString(iter108);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.frontCodes !== null && this.frontCodes !== undefined) {
    output.writeFieldBegin('frontCodes', Thrift.Type.SET, 23);
    output.writeSetBegin(Thrift.Type.I32, this.frontCodes.length);
    for (var iter109 in this.frontCodes)
    {
      if (this.frontCodes.hasOwnProperty(iter109))
      {
        iter109 = this.frontCodes[iter109];
        output.writeI32(iter109);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientCertificate = function(args) {
  this.certificate = null;
  this.code = null;
  this.codeType = null;
  this.boughtDate = null;
  this.useDate = null;
  this.linkUrl = null;
  if (args) {
    if (args.certificate !== undefined) {
      this.certificate = args.certificate;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.codeType !== undefined) {
      this.codeType = args.codeType;
    }
    if (args.boughtDate !== undefined) {
      this.boughtDate = args.boughtDate;
    }
    if (args.useDate !== undefined) {
      this.useDate = args.useDate;
    }
    if (args.linkUrl !== undefined) {
      this.linkUrl = args.linkUrl;
    }
  }
};
ClientCertificate.prototype = {};
ClientCertificate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.certificate = new Certificate();
        this.certificate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.codeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.boughtDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.useDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.linkUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientCertificate.prototype.write = function(output) {
  output.writeStructBegin('ClientCertificate');
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRUCT, 1);
    this.certificate.write(output);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.codeType !== null && this.codeType !== undefined) {
    output.writeFieldBegin('codeType', Thrift.Type.I32, 3);
    output.writeI32(this.codeType);
    output.writeFieldEnd();
  }
  if (this.boughtDate !== null && this.boughtDate !== undefined) {
    output.writeFieldBegin('boughtDate', Thrift.Type.STRING, 4);
    output.writeString(this.boughtDate);
    output.writeFieldEnd();
  }
  if (this.useDate !== null && this.useDate !== undefined) {
    output.writeFieldBegin('useDate', Thrift.Type.STRING, 5);
    output.writeString(this.useDate);
    output.writeFieldEnd();
  }
  if (this.linkUrl !== null && this.linkUrl !== undefined) {
    output.writeFieldBegin('linkUrl', Thrift.Type.STRING, 6);
    output.writeString(this.linkUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientCertificateCode = function(args) {
  this.picture = null;
  this.type = null;
  if (args) {
    if (args.picture !== undefined) {
      this.picture = args.picture;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ClientCertificateCode.prototype = {};
ClientCertificateCode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.picture = new Picture();
        this.picture.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientCertificateCode.prototype.write = function(output) {
  output.writeStructBegin('ClientCertificateCode');
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRUCT, 1);
    this.picture.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Supplier = function(args) {
  this.id = null;
  this.createDate = null;
  this.name = null;
  this.supplierDescription = null;
  this.priority = null;
  this.isActive = null;
  this.deleteDate = null;
  this.attrs = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.supplierDescription !== undefined) {
      this.supplierDescription = args.supplierDescription;
    }
    if (args.priority !== undefined) {
      this.priority = args.priority;
    }
    if (args.isActive !== undefined) {
      this.isActive = args.isActive;
    }
    if (args.deleteDate !== undefined) {
      this.deleteDate = args.deleteDate;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
  }
};
Supplier.prototype = {};
Supplier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.supplierDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isActive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.deleteDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size110 = 0;
        var _rtmp3114;
        this.attrs = {};
        var _ktype111 = 0;
        var _vtype112 = 0;
        _rtmp3114 = input.readMapBegin();
        _ktype111 = _rtmp3114.ktype;
        _vtype112 = _rtmp3114.vtype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          if (_i115 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key116 = null;
          var val117 = null;
          key116 = input.readString().value;
          val117 = input.readString().value;
          this.attrs[key116] = val117;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Supplier.prototype.write = function(output) {
  output.writeStructBegin('Supplier');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 2);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.supplierDescription !== null && this.supplierDescription !== undefined) {
    output.writeFieldBegin('supplierDescription', Thrift.Type.STRING, 4);
    output.writeString(this.supplierDescription);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 5);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.isActive !== null && this.isActive !== undefined) {
    output.writeFieldBegin('isActive', Thrift.Type.BOOL, 6);
    output.writeBool(this.isActive);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.STRING, 7);
    output.writeString(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter118 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter118))
      {
        var viter119 = this.attrs[kiter118];
        output.writeString(kiter118);
        output.writeString(viter119);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterItem = function(args) {
  this.field = null;
  this.condition = null;
  this.value = null;
  if (args) {
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
FilterItem.prototype = {};
FilterItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.condition = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterItem.prototype.write = function(output) {
  output.writeStructBegin('FilterItem');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.I32, 2);
    output.writeI32(this.condition);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Filter = function(args) {
  this.position = null;
  this.count = null;
  this.items = null;
  this.filterKey = null;
  if (args) {
    if (args.position !== undefined) {
      this.position = args.position;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.items !== undefined) {
      this.items = args.items;
    }
    if (args.filterKey !== undefined) {
      this.filterKey = args.filterKey;
    }
  }
};
Filter.prototype = {};
Filter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.position = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.count = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.items = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new FilterItem();
          elem126.read(input);
          this.items.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size127 = 0;
        var _rtmp3131;
        this.filterKey = {};
        var _ktype128 = 0;
        var _vtype129 = 0;
        _rtmp3131 = input.readMapBegin();
        _ktype128 = _rtmp3131.ktype;
        _vtype129 = _rtmp3131.vtype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          if (_i132 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key133 = null;
          var val134 = null;
          key133 = input.readString().value;
          val134 = input.readString().value;
          this.filterKey[key133] = val134;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Filter.prototype.write = function(output) {
  output.writeStructBegin('Filter');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I16, 1);
    output.writeI16(this.position);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I16, 2);
    output.writeI16(this.count);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter135 in this.items)
    {
      if (this.items.hasOwnProperty(iter135))
      {
        iter135 = this.items[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filterKey !== null && this.filterKey !== undefined) {
    output.writeFieldBegin('filterKey', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.filterKey));
    for (var kiter136 in this.filterKey)
    {
      if (this.filterKey.hasOwnProperty(kiter136))
      {
        var viter137 = this.filterKey[kiter136];
        output.writeString(kiter136);
        output.writeString(viter137);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = function(args) {
  this.id = null;
  this.name = null;
  this.parentID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.parentID !== undefined) {
      this.parentID = args.parentID;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 3);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscountRule = function(args) {
  this.id = null;
  this.merchantPointId = null;
  this.merchantActionId = null;
  this.type = null;
  this.count = null;
  this.maxDiscount = null;
  this.step = null;
  this.notCalculatedDiscountRuleType = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.maxDiscount !== undefined) {
      this.maxDiscount = args.maxDiscount;
    }
    if (args.step !== undefined) {
      this.step = args.step;
    }
    if (args.notCalculatedDiscountRuleType !== undefined) {
      this.notCalculatedDiscountRuleType = args.notCalculatedDiscountRuleType;
    }
  }
};
DiscountRule.prototype = {};
DiscountRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxDiscount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.step = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.notCalculatedDiscountRuleType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscountRule.prototype.write = function(output) {
  output.writeStructBegin('DiscountRule');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 5);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.maxDiscount !== null && this.maxDiscount !== undefined) {
    output.writeFieldBegin('maxDiscount', Thrift.Type.I32, 6);
    output.writeI32(this.maxDiscount);
    output.writeFieldEnd();
  }
  if (this.step !== null && this.step !== undefined) {
    output.writeFieldBegin('step', Thrift.Type.I32, 7);
    output.writeI32(this.step);
    output.writeFieldEnd();
  }
  if (this.notCalculatedDiscountRuleType !== null && this.notCalculatedDiscountRuleType !== undefined) {
    output.writeFieldBegin('notCalculatedDiscountRuleType', Thrift.Type.I32, 8);
    output.writeI32(this.notCalculatedDiscountRuleType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Discount = function(args) {
  this.initialAmount = null;
  this.discountInPercentage = null;
  this.discountInBonuses = null;
  this.discount = null;
  this.merchantPointId = null;
  this.merchantActionId = null;
  if (args) {
    if (args.initialAmount !== undefined) {
      this.initialAmount = args.initialAmount;
    }
    if (args.discountInPercentage !== undefined) {
      this.discountInPercentage = args.discountInPercentage;
    }
    if (args.discountInBonuses !== undefined) {
      this.discountInBonuses = args.discountInBonuses;
    }
    if (args.discount !== undefined) {
      this.discount = args.discount;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
  }
};
Discount.prototype = {};
Discount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.initialAmount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.discountInPercentage = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.discountInBonuses = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.discount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Discount.prototype.write = function(output) {
  output.writeStructBegin('Discount');
  if (this.initialAmount !== null && this.initialAmount !== undefined) {
    output.writeFieldBegin('initialAmount', Thrift.Type.I64, 1);
    output.writeI64(this.initialAmount);
    output.writeFieldEnd();
  }
  if (this.discountInPercentage !== null && this.discountInPercentage !== undefined) {
    output.writeFieldBegin('discountInPercentage', Thrift.Type.I32, 2);
    output.writeI32(this.discountInPercentage);
    output.writeFieldEnd();
  }
  if (this.discountInBonuses !== null && this.discountInBonuses !== undefined) {
    output.writeFieldBegin('discountInBonuses', Thrift.Type.I64, 3);
    output.writeI64(this.discountInBonuses);
    output.writeFieldEnd();
  }
  if (this.discount !== null && this.discount !== undefined) {
    output.writeFieldBegin('discount', Thrift.Type.I64, 4);
    output.writeI64(this.discount);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 5);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 6);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ETL = function(args) {
  this.id = null;
  this.folderIn = null;
  this.folderCopy = null;
  this.folderOut = null;
  this.formatIn = null;
  this.formatOut = null;
  this.active = null;
  this.clientId = null;
  this.supplierId = null;
  this.createDate = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.folderIn !== undefined) {
      this.folderIn = args.folderIn;
    }
    if (args.folderCopy !== undefined) {
      this.folderCopy = args.folderCopy;
    }
    if (args.folderOut !== undefined) {
      this.folderOut = args.folderOut;
    }
    if (args.formatIn !== undefined) {
      this.formatIn = args.formatIn;
    }
    if (args.formatOut !== undefined) {
      this.formatOut = args.formatOut;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.supplierId !== undefined) {
      this.supplierId = args.supplierId;
    }
    if (args.createDate !== undefined) {
      this.createDate = args.createDate;
    }
  }
};
ETL.prototype = {};
ETL.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.folderIn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.folderCopy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.folderOut = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.formatIn = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.formatOut = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.supplierId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ETL.prototype.write = function(output) {
  output.writeStructBegin('ETL');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.folderIn !== null && this.folderIn !== undefined) {
    output.writeFieldBegin('folderIn', Thrift.Type.STRING, 2);
    output.writeString(this.folderIn);
    output.writeFieldEnd();
  }
  if (this.folderCopy !== null && this.folderCopy !== undefined) {
    output.writeFieldBegin('folderCopy', Thrift.Type.STRING, 3);
    output.writeString(this.folderCopy);
    output.writeFieldEnd();
  }
  if (this.folderOut !== null && this.folderOut !== undefined) {
    output.writeFieldBegin('folderOut', Thrift.Type.STRING, 4);
    output.writeString(this.folderOut);
    output.writeFieldEnd();
  }
  if (this.formatIn !== null && this.formatIn !== undefined) {
    output.writeFieldBegin('formatIn', Thrift.Type.I32, 5);
    output.writeI32(this.formatIn);
    output.writeFieldEnd();
  }
  if (this.formatOut !== null && this.formatOut !== undefined) {
    output.writeFieldBegin('formatOut', Thrift.Type.I32, 6);
    output.writeI32(this.formatOut);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 7);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 8);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.supplierId !== null && this.supplierId !== undefined) {
    output.writeFieldBegin('supplierId', Thrift.Type.STRING, 9);
    output.writeString(this.supplierId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.STRING, 10);
    output.writeString(this.createDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UniqueCode = function(args) {
  this.code = null;
  this.validTo = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.validTo !== undefined) {
      this.validTo = args.validTo;
    }
  }
};
UniqueCode.prototype = {};
UniqueCode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.validTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UniqueCode.prototype.write = function(output) {
  output.writeStructBegin('UniqueCode');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.validTo !== null && this.validTo !== undefined) {
    output.writeFieldBegin('validTo', Thrift.Type.STRING, 2);
    output.writeString(this.validTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CURRENT_VERSION = '1.0-alpha.97';
