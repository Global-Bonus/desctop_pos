//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MerchantPointService_getClientInfoById_args = function(args) {
  this.token = null;
  this.clientId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
  }
};
MerchantPointService_getClientInfoById_args.prototype = {};
MerchantPointService_getClientInfoById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 2);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoById_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getClientInfoById_result.prototype = {};
MerchantPointService_getClientInfoById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByAccountId_args = function(args) {
  this.token = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
MerchantPointService_getClientInfoByAccountId_args.prototype = {};
MerchantPointService_getClientInfoByAccountId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByAccountId_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByAccountId_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByAccountId_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getClientInfoByAccountId_result.prototype = {};
MerchantPointService_getClientInfoByAccountId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByAccountId_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByAccountId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByCardNumber_args = function(args) {
  this.token = null;
  this.bonusProgramId = null;
  this.cardNumber = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.bonusProgramId !== undefined) {
      this.bonusProgramId = args.bonusProgramId;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
  }
};
MerchantPointService_getClientInfoByCardNumber_args.prototype = {};
MerchantPointService_getClientInfoByCardNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByCardNumber_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByCardNumber_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.bonusProgramId !== null && this.bonusProgramId !== undefined) {
    output.writeFieldBegin('bonusProgramId', Thrift.Type.STRING, 2);
    output.writeString(this.bonusProgramId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 3);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByCardNumber_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getClientInfoByCardNumber_result.prototype = {};
MerchantPointService_getClientInfoByCardNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByCardNumber_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByCardNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByOneTimePassword_args = function(args) {
  this.token = null;
  this.oneTimePassword = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.oneTimePassword !== undefined) {
      this.oneTimePassword = args.oneTimePassword;
    }
  }
};
MerchantPointService_getClientInfoByOneTimePassword_args.prototype = {};
MerchantPointService_getClientInfoByOneTimePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oneTimePassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByOneTimePassword_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByOneTimePassword_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.oneTimePassword !== null && this.oneTimePassword !== undefined) {
    output.writeFieldBegin('oneTimePassword', Thrift.Type.STRING, 2);
    output.writeString(this.oneTimePassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByOneTimePassword_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getClientInfoByOneTimePassword_result.prototype = {};
MerchantPointService_getClientInfoByOneTimePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByOneTimePassword_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByOneTimePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByCommunication_args = function(args) {
  this.token = null;
  this.communication = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.communication !== undefined) {
      this.communication = args.communication;
    }
  }
};
MerchantPointService_getClientInfoByCommunication_args.prototype = {};
MerchantPointService_getClientInfoByCommunication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByCommunication_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByCommunication_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 2);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getClientInfoByCommunication_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getClientInfoByCommunication_result.prototype = {};
MerchantPointService_getClientInfoByCommunication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getClientInfoByCommunication_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getClientInfoByCommunication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountAttachedMerchantPoints_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getCountAttachedMerchantPoints_args.prototype = {};
MerchantPointService_getCountAttachedMerchantPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountAttachedMerchantPoints_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountAttachedMerchantPoints_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountAttachedMerchantPoints_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getCountAttachedMerchantPoints_result.prototype = {};
MerchantPointService_getCountAttachedMerchantPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountAttachedMerchantPoints_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountAttachedMerchantPoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getAttachedMerchantPoints_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getAttachedMerchantPoints_args.prototype = {};
MerchantPointService_getAttachedMerchantPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getAttachedMerchantPoints_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getAttachedMerchantPoints_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getAttachedMerchantPoints_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getAttachedMerchantPoints_result.prototype = {};
MerchantPointService_getAttachedMerchantPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size446 = 0;
        var _rtmp3450;
        this.success = [];
        var _etype449 = 0;
        _rtmp3450 = input.readListBegin();
        _etype449 = _rtmp3450.etype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var elem452 = null;
          elem452 = new MerchantPoint();
          elem452.read(input);
          this.success.push(elem452);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getAttachedMerchantPoints_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getAttachedMerchantPoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter453 in this.success)
    {
      if (this.success.hasOwnProperty(iter453))
      {
        iter453 = this.success[iter453];
        iter453.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_isMerchantPointAttached_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
  }
};
MerchantPointService_isMerchantPointAttached_args.prototype = {};
MerchantPointService_isMerchantPointAttached_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_isMerchantPointAttached_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_isMerchantPointAttached_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_isMerchantPointAttached_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_isMerchantPointAttached_result.prototype = {};
MerchantPointService_isMerchantPointAttached_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_isMerchantPointAttached_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_isMerchantPointAttached_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithFromToDate_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getCountProvidedPaymentsWithFromToDate_args.prototype = {};
MerchantPointService_getCountProvidedPaymentsWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountProvidedPaymentsWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 3);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 4);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getCountProvidedPaymentsWithFromToDate_result.prototype = {};
MerchantPointService_getCountProvidedPaymentsWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountProvidedPaymentsWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithFromToDate_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.dateFrom = null;
  this.dateTo = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.dateFrom !== undefined) {
      this.dateFrom = args.dateFrom;
    }
    if (args.dateTo !== undefined) {
      this.dateTo = args.dateTo;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getProvidedPaymentsWithFromToDate_args.prototype = {};
MerchantPointService_getProvidedPaymentsWithFromToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dateTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithFromToDate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getProvidedPaymentsWithFromToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.dateFrom !== null && this.dateFrom !== undefined) {
    output.writeFieldBegin('dateFrom', Thrift.Type.STRING, 3);
    output.writeString(this.dateFrom);
    output.writeFieldEnd();
  }
  if (this.dateTo !== null && this.dateTo !== undefined) {
    output.writeFieldBegin('dateTo', Thrift.Type.STRING, 4);
    output.writeString(this.dateTo);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithFromToDate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getProvidedPaymentsWithFromToDate_result.prototype = {};
MerchantPointService_getProvidedPaymentsWithFromToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size454 = 0;
        var _rtmp3458;
        this.success = [];
        var _etype457 = 0;
        _rtmp3458 = input.readListBegin();
        _etype457 = _rtmp3458.etype;
        _size454 = _rtmp3458.size;
        for (var _i459 = 0; _i459 < _size454; ++_i459)
        {
          var elem460 = null;
          elem460 = new Payment();
          elem460.read(input);
          this.success.push(elem460);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithFromToDate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getProvidedPaymentsWithFromToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter461 in this.success)
    {
      if (this.success.hasOwnProperty(iter461))
      {
        iter461 = this.success[iter461];
        iter461.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithLastDays_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getCountProvidedPaymentsWithLastDays_args.prototype = {};
MerchantPointService_getCountProvidedPaymentsWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountProvidedPaymentsWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 3);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getCountProvidedPaymentsWithLastDays_result.prototype = {};
MerchantPointService_getCountProvidedPaymentsWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCountProvidedPaymentsWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCountProvidedPaymentsWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithLastDays_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.lastDays = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.lastDays !== undefined) {
      this.lastDays = args.lastDays;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MerchantPointService_getProvidedPaymentsWithLastDays_args.prototype = {};
MerchantPointService_getProvidedPaymentsWithLastDays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.lastDays = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithLastDays_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getProvidedPaymentsWithLastDays_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.lastDays !== null && this.lastDays !== undefined) {
    output.writeFieldBegin('lastDays', Thrift.Type.I16, 3);
    output.writeI16(this.lastDays);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithLastDays_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getProvidedPaymentsWithLastDays_result.prototype = {};
MerchantPointService_getProvidedPaymentsWithLastDays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size462 = 0;
        var _rtmp3466;
        this.success = [];
        var _etype465 = 0;
        _rtmp3466 = input.readListBegin();
        _etype465 = _rtmp3466.etype;
        _size462 = _rtmp3466.size;
        for (var _i467 = 0; _i467 < _size462; ++_i467)
        {
          var elem468 = null;
          elem468 = new Payment();
          elem468.read(input);
          this.success.push(elem468);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getProvidedPaymentsWithLastDays_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getProvidedPaymentsWithLastDays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter469 in this.success)
    {
      if (this.success.hasOwnProperty(iter469))
      {
        iter469 = this.success[iter469];
        iter469.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_createPayment_args = function(args) {
  this.token = null;
  this.payment = null;
  this.clientId = null;
  this.communication = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.payment !== undefined) {
      this.payment = args.payment;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.communication !== undefined) {
      this.communication = args.communication;
    }
  }
};
MerchantPointService_createPayment_args.prototype = {};
MerchantPointService_createPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment = new Payment();
        this.payment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_createPayment_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_createPayment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.payment !== null && this.payment !== undefined) {
    output.writeFieldBegin('payment', Thrift.Type.STRUCT, 2);
    this.payment.write(output);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 3);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 4);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_createPayment_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_createPayment_result.prototype = {};
MerchantPointService_createPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Payment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_createPayment_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_createPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_removePaymentById_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MerchantPointService_removePaymentById_args.prototype = {};
MerchantPointService_removePaymentById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_removePaymentById_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_removePaymentById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_removePaymentById_result = function(args) {
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_removePaymentById_result.prototype = {};
MerchantPointService_removePaymentById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_removePaymentById_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_removePaymentById_result');
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_requestConfirmPayment_args = function(args) {
  this.token = null;
  this.paymentId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.paymentId !== undefined) {
      this.paymentId = args.paymentId;
    }
  }
};
MerchantPointService_requestConfirmPayment_args.prototype = {};
MerchantPointService_requestConfirmPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paymentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_requestConfirmPayment_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_requestConfirmPayment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.paymentId !== null && this.paymentId !== undefined) {
    output.writeFieldBegin('paymentId', Thrift.Type.STRING, 2);
    output.writeString(this.paymentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_requestConfirmPayment_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_requestConfirmPayment_result.prototype = {};
MerchantPointService_requestConfirmPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Payment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_requestConfirmPayment_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_requestConfirmPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_confirmPayment_args = function(args) {
  this.token = null;
  this.paymentId = null;
  this.verifyCode = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.paymentId !== undefined) {
      this.paymentId = args.paymentId;
    }
    if (args.verifyCode !== undefined) {
      this.verifyCode = args.verifyCode;
    }
  }
};
MerchantPointService_confirmPayment_args.prototype = {};
MerchantPointService_confirmPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paymentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_confirmPayment_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_confirmPayment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.paymentId !== null && this.paymentId !== undefined) {
    output.writeFieldBegin('paymentId', Thrift.Type.STRING, 2);
    output.writeString(this.paymentId);
    output.writeFieldEnd();
  }
  if (this.verifyCode !== null && this.verifyCode !== undefined) {
    output.writeFieldBegin('verifyCode', Thrift.Type.STRING, 3);
    output.writeString(this.verifyCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_confirmPayment_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_confirmPayment_result.prototype = {};
MerchantPointService_confirmPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Payment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_confirmPayment_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_confirmPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCertificateByCode_args = function(args) {
  this.token = null;
  this.certificateCode = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.certificateCode !== undefined) {
      this.certificateCode = args.certificateCode;
    }
  }
};
MerchantPointService_getCertificateByCode_args.prototype = {};
MerchantPointService_getCertificateByCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificateCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCertificateByCode_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCertificateByCode_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.certificateCode !== null && this.certificateCode !== undefined) {
    output.writeFieldBegin('certificateCode', Thrift.Type.STRING, 2);
    output.writeString(this.certificateCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_getCertificateByCode_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_getCertificateByCode_result.prototype = {};
MerchantPointService_getCertificateByCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientCertificate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_getCertificateByCode_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_getCertificateByCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_useCertificate_args = function(args) {
  this.token = null;
  this.merchantPointId = null;
  this.clientCertificateId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.clientCertificateId !== undefined) {
      this.clientCertificateId = args.clientCertificateId;
    }
  }
};
MerchantPointService_useCertificate_args.prototype = {};
MerchantPointService_useCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clientCertificateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_useCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_useCertificate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.clientCertificateId !== null && this.clientCertificateId !== undefined) {
    output.writeFieldBegin('clientCertificateId', Thrift.Type.STRING, 3);
    output.writeString(this.clientCertificateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_useCertificate_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_useCertificate_result.prototype = {};
MerchantPointService_useCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Payment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_useCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_useCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_calculateDiscount_args = function(args) {
  this.token = null;
  this.bonusProgramId = null;
  this.clientId = null;
  this.merchantPointId = null;
  this.merchantActionId = null;
  this.amount = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.bonusProgramId !== undefined) {
      this.bonusProgramId = args.bonusProgramId;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.merchantPointId !== undefined) {
      this.merchantPointId = args.merchantPointId;
    }
    if (args.merchantActionId !== undefined) {
      this.merchantActionId = args.merchantActionId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
  }
};
MerchantPointService_calculateDiscount_args.prototype = {};
MerchantPointService_calculateDiscount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bonusProgramId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.merchantPointId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.merchantActionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_calculateDiscount_args.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_calculateDiscount_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.bonusProgramId !== null && this.bonusProgramId !== undefined) {
    output.writeFieldBegin('bonusProgramId', Thrift.Type.STRING, 2);
    output.writeString(this.bonusProgramId);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 3);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.merchantPointId !== null && this.merchantPointId !== undefined) {
    output.writeFieldBegin('merchantPointId', Thrift.Type.STRING, 4);
    output.writeString(this.merchantPointId);
    output.writeFieldEnd();
  }
  if (this.merchantActionId !== null && this.merchantActionId !== undefined) {
    output.writeFieldBegin('merchantActionId', Thrift.Type.STRING, 5);
    output.writeString(this.merchantActionId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 6);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointService_calculateDiscount_result = function(args) {
  this.success = null;
  this.sessionError = null;
  this.securityError = null;
  this.validError = null;
  this.error = null;
  if (args instanceof WrongSessionException) {
    this.sessionError = args;
    return;
  }
  if (args instanceof AccessDenyException) {
    this.securityError = args;
    return;
  }
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sessionError !== undefined) {
      this.sessionError = args.sessionError;
    }
    if (args.securityError !== undefined) {
      this.securityError = args.securityError;
    }
    if (args.validError !== undefined) {
      this.validError = args.validError;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
MerchantPointService_calculateDiscount_result.prototype = {};
MerchantPointService_calculateDiscount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Discount();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionError = new WrongSessionException();
        this.sessionError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityError = new AccessDenyException();
        this.securityError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantPointService_calculateDiscount_result.prototype.write = function(output) {
  output.writeStructBegin('MerchantPointService_calculateDiscount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionError !== null && this.sessionError !== undefined) {
    output.writeFieldBegin('sessionError', Thrift.Type.STRUCT, 1);
    this.sessionError.write(output);
    output.writeFieldEnd();
  }
  if (this.securityError !== null && this.securityError !== undefined) {
    output.writeFieldBegin('securityError', Thrift.Type.STRUCT, 2);
    this.securityError.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 3);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 4);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantPointServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MerchantPointServiceClient.prototype = {};
MerchantPointServiceClient.prototype.getClientInfoById = function(token, clientId) {
  this.send_getClientInfoById(token, clientId);
  return this.recv_getClientInfoById();
};

MerchantPointServiceClient.prototype.send_getClientInfoById = function(token, clientId) {
  this.output.writeMessageBegin('getClientInfoById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getClientInfoById_args();
  args.token = token;
  args.clientId = clientId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getClientInfoById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getClientInfoById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getClientInfoById failed: unknown result';
};
MerchantPointServiceClient.prototype.getClientInfoByAccountId = function(token, accountId) {
  this.send_getClientInfoByAccountId(token, accountId);
  return this.recv_getClientInfoByAccountId();
};

MerchantPointServiceClient.prototype.send_getClientInfoByAccountId = function(token, accountId) {
  this.output.writeMessageBegin('getClientInfoByAccountId', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getClientInfoByAccountId_args();
  args.token = token;
  args.accountId = accountId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getClientInfoByAccountId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getClientInfoByAccountId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getClientInfoByAccountId failed: unknown result';
};
MerchantPointServiceClient.prototype.getClientInfoByCardNumber = function(token, bonusProgramId, cardNumber) {
  this.send_getClientInfoByCardNumber(token, bonusProgramId, cardNumber);
  return this.recv_getClientInfoByCardNumber();
};

MerchantPointServiceClient.prototype.send_getClientInfoByCardNumber = function(token, bonusProgramId, cardNumber) {
  this.output.writeMessageBegin('getClientInfoByCardNumber', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getClientInfoByCardNumber_args();
  args.token = token;
  args.bonusProgramId = bonusProgramId;
  args.cardNumber = cardNumber;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getClientInfoByCardNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getClientInfoByCardNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getClientInfoByCardNumber failed: unknown result';
};
MerchantPointServiceClient.prototype.getClientInfoByOneTimePassword = function(token, oneTimePassword) {
  this.send_getClientInfoByOneTimePassword(token, oneTimePassword);
  return this.recv_getClientInfoByOneTimePassword();
};

MerchantPointServiceClient.prototype.send_getClientInfoByOneTimePassword = function(token, oneTimePassword) {
  this.output.writeMessageBegin('getClientInfoByOneTimePassword', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getClientInfoByOneTimePassword_args();
  args.token = token;
  args.oneTimePassword = oneTimePassword;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getClientInfoByOneTimePassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getClientInfoByOneTimePassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getClientInfoByOneTimePassword failed: unknown result';
};
MerchantPointServiceClient.prototype.getClientInfoByCommunication = function(token, communication) {
  this.send_getClientInfoByCommunication(token, communication);
  return this.recv_getClientInfoByCommunication();
};

MerchantPointServiceClient.prototype.send_getClientInfoByCommunication = function(token, communication) {
  this.output.writeMessageBegin('getClientInfoByCommunication', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getClientInfoByCommunication_args();
  args.token = token;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getClientInfoByCommunication = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getClientInfoByCommunication_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getClientInfoByCommunication failed: unknown result';
};
MerchantPointServiceClient.prototype.getCountAttachedMerchantPoints = function(token, filter) {
  this.send_getCountAttachedMerchantPoints(token, filter);
  return this.recv_getCountAttachedMerchantPoints();
};

MerchantPointServiceClient.prototype.send_getCountAttachedMerchantPoints = function(token, filter) {
  this.output.writeMessageBegin('getCountAttachedMerchantPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getCountAttachedMerchantPoints_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getCountAttachedMerchantPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getCountAttachedMerchantPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAttachedMerchantPoints failed: unknown result';
};
MerchantPointServiceClient.prototype.getAttachedMerchantPoints = function(token, filter) {
  this.send_getAttachedMerchantPoints(token, filter);
  return this.recv_getAttachedMerchantPoints();
};

MerchantPointServiceClient.prototype.send_getAttachedMerchantPoints = function(token, filter) {
  this.output.writeMessageBegin('getAttachedMerchantPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getAttachedMerchantPoints_args();
  args.token = token;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getAttachedMerchantPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getAttachedMerchantPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAttachedMerchantPoints failed: unknown result';
};
MerchantPointServiceClient.prototype.isMerchantPointAttached = function(token, merchantPointId) {
  this.send_isMerchantPointAttached(token, merchantPointId);
  return this.recv_isMerchantPointAttached();
};

MerchantPointServiceClient.prototype.send_isMerchantPointAttached = function(token, merchantPointId) {
  this.output.writeMessageBegin('isMerchantPointAttached', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_isMerchantPointAttached_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_isMerchantPointAttached = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_isMerchantPointAttached_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isMerchantPointAttached failed: unknown result';
};
MerchantPointServiceClient.prototype.getCountProvidedPaymentsWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.send_getCountProvidedPaymentsWithFromToDate(token, merchantPointId, dateFrom, dateTo, filter);
  return this.recv_getCountProvidedPaymentsWithFromToDate();
};

MerchantPointServiceClient.prototype.send_getCountProvidedPaymentsWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getCountProvidedPaymentsWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getCountProvidedPaymentsWithFromToDate_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getCountProvidedPaymentsWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getCountProvidedPaymentsWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountProvidedPaymentsWithFromToDate failed: unknown result';
};
MerchantPointServiceClient.prototype.getProvidedPaymentsWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.send_getProvidedPaymentsWithFromToDate(token, merchantPointId, dateFrom, dateTo, filter);
  return this.recv_getProvidedPaymentsWithFromToDate();
};

MerchantPointServiceClient.prototype.send_getProvidedPaymentsWithFromToDate = function(token, merchantPointId, dateFrom, dateTo, filter) {
  this.output.writeMessageBegin('getProvidedPaymentsWithFromToDate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getProvidedPaymentsWithFromToDate_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.dateFrom = dateFrom;
  args.dateTo = dateTo;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getProvidedPaymentsWithFromToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getProvidedPaymentsWithFromToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProvidedPaymentsWithFromToDate failed: unknown result';
};
MerchantPointServiceClient.prototype.getCountProvidedPaymentsWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.send_getCountProvidedPaymentsWithLastDays(token, merchantPointId, lastDays, filter);
  return this.recv_getCountProvidedPaymentsWithLastDays();
};

MerchantPointServiceClient.prototype.send_getCountProvidedPaymentsWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.output.writeMessageBegin('getCountProvidedPaymentsWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getCountProvidedPaymentsWithLastDays_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getCountProvidedPaymentsWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getCountProvidedPaymentsWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountProvidedPaymentsWithLastDays failed: unknown result';
};
MerchantPointServiceClient.prototype.getProvidedPaymentsWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.send_getProvidedPaymentsWithLastDays(token, merchantPointId, lastDays, filter);
  return this.recv_getProvidedPaymentsWithLastDays();
};

MerchantPointServiceClient.prototype.send_getProvidedPaymentsWithLastDays = function(token, merchantPointId, lastDays, filter) {
  this.output.writeMessageBegin('getProvidedPaymentsWithLastDays', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getProvidedPaymentsWithLastDays_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.lastDays = lastDays;
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getProvidedPaymentsWithLastDays = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getProvidedPaymentsWithLastDays_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProvidedPaymentsWithLastDays failed: unknown result';
};
MerchantPointServiceClient.prototype.createPayment = function(token, payment, clientId, communication) {
  this.send_createPayment(token, payment, clientId, communication);
  return this.recv_createPayment();
};

MerchantPointServiceClient.prototype.send_createPayment = function(token, payment, clientId, communication) {
  this.output.writeMessageBegin('createPayment', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_createPayment_args();
  args.token = token;
  args.payment = payment;
  args.clientId = clientId;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_createPayment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_createPayment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createPayment failed: unknown result';
};
MerchantPointServiceClient.prototype.removePaymentById = function(token, id) {
  this.send_removePaymentById(token, id);
  this.recv_removePaymentById();
};

MerchantPointServiceClient.prototype.send_removePaymentById = function(token, id) {
  this.output.writeMessageBegin('removePaymentById', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_removePaymentById_args();
  args.token = token;
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_removePaymentById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_removePaymentById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  return;
};
MerchantPointServiceClient.prototype.requestConfirmPayment = function(token, paymentId) {
  this.send_requestConfirmPayment(token, paymentId);
  return this.recv_requestConfirmPayment();
};

MerchantPointServiceClient.prototype.send_requestConfirmPayment = function(token, paymentId) {
  this.output.writeMessageBegin('requestConfirmPayment', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_requestConfirmPayment_args();
  args.token = token;
  args.paymentId = paymentId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_requestConfirmPayment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_requestConfirmPayment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'requestConfirmPayment failed: unknown result';
};
MerchantPointServiceClient.prototype.confirmPayment = function(token, paymentId, verifyCode) {
  this.send_confirmPayment(token, paymentId, verifyCode);
  return this.recv_confirmPayment();
};

MerchantPointServiceClient.prototype.send_confirmPayment = function(token, paymentId, verifyCode) {
  this.output.writeMessageBegin('confirmPayment', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_confirmPayment_args();
  args.token = token;
  args.paymentId = paymentId;
  args.verifyCode = verifyCode;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_confirmPayment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_confirmPayment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'confirmPayment failed: unknown result';
};
MerchantPointServiceClient.prototype.getCertificateByCode = function(token, certificateCode) {
  this.send_getCertificateByCode(token, certificateCode);
  return this.recv_getCertificateByCode();
};

MerchantPointServiceClient.prototype.send_getCertificateByCode = function(token, certificateCode) {
  this.output.writeMessageBegin('getCertificateByCode', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_getCertificateByCode_args();
  args.token = token;
  args.certificateCode = certificateCode;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_getCertificateByCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_getCertificateByCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCertificateByCode failed: unknown result';
};
MerchantPointServiceClient.prototype.useCertificate = function(token, merchantPointId, clientCertificateId) {
  this.send_useCertificate(token, merchantPointId, clientCertificateId);
  return this.recv_useCertificate();
};

MerchantPointServiceClient.prototype.send_useCertificate = function(token, merchantPointId, clientCertificateId) {
  this.output.writeMessageBegin('useCertificate', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_useCertificate_args();
  args.token = token;
  args.merchantPointId = merchantPointId;
  args.clientCertificateId = clientCertificateId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_useCertificate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_useCertificate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'useCertificate failed: unknown result';
};
MerchantPointServiceClient.prototype.calculateDiscount = function(token, bonusProgramId, clientId, merchantPointId, merchantActionId, amount) {
  this.send_calculateDiscount(token, bonusProgramId, clientId, merchantPointId, merchantActionId, amount);
  return this.recv_calculateDiscount();
};

MerchantPointServiceClient.prototype.send_calculateDiscount = function(token, bonusProgramId, clientId, merchantPointId, merchantActionId, amount) {
  this.output.writeMessageBegin('calculateDiscount', Thrift.MessageType.CALL, this.seqid);
  var args = new MerchantPointService_calculateDiscount_args();
  args.token = token;
  args.bonusProgramId = bonusProgramId;
  args.clientId = clientId;
  args.merchantPointId = merchantPointId;
  args.merchantActionId = merchantActionId;
  args.amount = amount;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MerchantPointServiceClient.prototype.recv_calculateDiscount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MerchantPointService_calculateDiscount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sessionError) {
    throw result.sessionError;
  }
  if (null !== result.securityError) {
    throw result.securityError;
  }
  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateDiscount failed: unknown result';
};
